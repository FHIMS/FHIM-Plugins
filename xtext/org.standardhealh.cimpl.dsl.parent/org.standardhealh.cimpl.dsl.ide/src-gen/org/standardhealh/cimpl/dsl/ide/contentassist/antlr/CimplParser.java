/*
 * generated by Xtext 2.10.0
 */
package org.standardhealh.cimpl.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.standardhealh.cimpl.dsl.ide.contentassist.antlr.internal.InternalCimplParser;
import org.standardhealh.cimpl.dsl.services.CimplGrammarAccess;

public class CimplParser extends AbstractContentAssistParser {

	@Inject
	private CimplGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCimplParser createParser() {
		InternalCimplParser result = new InternalCimplParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDocAccess().getGroup(), "rule__Doc__Group__0");
					put(grammarAccess.getDocHeaderAccess().getGroup(), "rule__DocHeader__Group__0");
					put(grammarAccess.getUsesStatementAccess().getGroup(), "rule__UsesStatement__Group__0");
					put(grammarAccess.getUsesStatementAccess().getGroup_2(), "rule__UsesStatement__Group_2__0");
					put(grammarAccess.getEntryElementAccess().getGroup(), "rule__EntryElement__Group__0");
					put(grammarAccess.getEntryElementAccess().getGroup_13(), "rule__EntryElement__Group_13__0");
					put(grammarAccess.getEntryElementAccess().getGroup_15(), "rule__EntryElement__Group_15__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getDocAccess().getHeaderAssignment_0(), "rule__Doc__HeaderAssignment_0");
					put(grammarAccess.getDocAccess().getUsesAssignment_1(), "rule__Doc__UsesAssignment_1");
					put(grammarAccess.getDocAccess().getEntriesAssignment_2(), "rule__Doc__EntriesAssignment_2");
					put(grammarAccess.getDocHeaderAccess().getVersionAssignment_2(), "rule__DocHeader__VersionAssignment_2");
					put(grammarAccess.getDocHeaderAccess().getNamespaceAssignment_5(), "rule__DocHeader__NamespaceAssignment_5");
					put(grammarAccess.getUsesStatementAccess().getNamespaceAssignment_1(), "rule__UsesStatement__NamespaceAssignment_1");
					put(grammarAccess.getUsesStatementAccess().getNamespaceAssignment_2_1(), "rule__UsesStatement__NamespaceAssignment_2_1");
					put(grammarAccess.getEntryElementAccess().getNameAssignment_1(), "rule__EntryElement__NameAssignment_1");
					put(grammarAccess.getEntryElementAccess().getBasedOnAssignment_4(), "rule__EntryElement__BasedOnAssignment_4");
					put(grammarAccess.getEntryElementAccess().getConceptAssignment_7(), "rule__EntryElement__ConceptAssignment_7");
					put(grammarAccess.getEntryElementAccess().getDescriptionAssignment_10(), "rule__EntryElement__DescriptionAssignment_10");
					put(grammarAccess.getEntryElementAccess().getElementsAssignment_12(), "rule__EntryElement__ElementsAssignment_12");
					put(grammarAccess.getEntryElementAccess().getElementsAssignment_13_1(), "rule__EntryElement__ElementsAssignment_13_1");
					put(grammarAccess.getEntryElementAccess().getSubelementsAssignment_15_1(), "rule__EntryElement__SubelementsAssignment_15_1");
					put(grammarAccess.getEntryElementAccess().getValueAssignment_17(), "rule__EntryElement__ValueAssignment_17");
					put(grammarAccess.getElementAccess().getLowerAssignment_0(), "rule__Element__LowerAssignment_0");
					put(grammarAccess.getElementAccess().getUpperAssignment_2(), "rule__Element__UpperAssignment_2");
					put(grammarAccess.getElementAccess().getNameAssignment_3(), "rule__Element__NameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalCimplParser typedParser = (InternalCimplParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CimplGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CimplGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
