/*
 * generated by Xtext 2.10.0
 */
package org.standardhealh.cimpl.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CimplGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsDocParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements=Doc?;
		@Override public ParserRule getRule() { return rule; }
		
		//elements=Doc?
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Doc
		public RuleCall getElementsDocParserRuleCall_0() { return cElementsDocParserRuleCall_0; }
	}
	public class DocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Doc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderDocHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Assignment cUsesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsesUsesStatementParserRuleCall_1_0 = (RuleCall)cUsesAssignment_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntriesEntryElementParserRuleCall_2_0 = (RuleCall)cEntriesAssignment_2.eContents().get(0);
		
		//Doc:
		//	header=DocHeader
		//	uses=UsesStatement
		//	entries+=EntryElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//header=DocHeader uses=UsesStatement entries+=EntryElement*
		public Group getGroup() { return cGroup; }
		
		//header=DocHeader
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }
		
		//DocHeader
		public RuleCall getHeaderDocHeaderParserRuleCall_0_0() { return cHeaderDocHeaderParserRuleCall_0_0; }
		
		//uses=UsesStatement
		public Assignment getUsesAssignment_1() { return cUsesAssignment_1; }
		
		//UsesStatement
		public RuleCall getUsesUsesStatementParserRuleCall_1_0() { return cUsesUsesStatementParserRuleCall_1_0; }
		
		//entries+=EntryElement*
		public Assignment getEntriesAssignment_2() { return cEntriesAssignment_2; }
		
		//EntryElement
		public RuleCall getEntriesEntryElementParserRuleCall_2_0() { return cEntriesEntryElementParserRuleCall_2_0; }
	}
	public class DocHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.DocHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGrammarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDataElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionSTRINGTerminalRuleCall_2_0 = (RuleCall)cVersionAssignment_2.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNamespaceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNamespaceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_5_0 = (RuleCall)cNamespaceAssignment_5.eContents().get(0);
		private final Keyword cControl000dKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cControl000dKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// descriptionProp? usesStatement? pathDefs? vocabularyDefs? dataDefs);
		////	description=DescriptionProp
		//// DescriptionProp: 'Description:' STRING '\r';	
		//DocHeader:
		//	'Grammar:' 'DataElement' version=STRING '\r\n' 'Namespace:' namespace=STRING '\r' '\r';
		@Override public ParserRule getRule() { return rule; }
		
		//'Grammar:' 'DataElement' version=STRING '\r\n' 'Namespace:' namespace=STRING '\r' '\r'
		public Group getGroup() { return cGroup; }
		
		//'Grammar:'
		public Keyword getGrammarKeyword_0() { return cGrammarKeyword_0; }
		
		//'DataElement'
		public Keyword getDataElementKeyword_1() { return cDataElementKeyword_1; }
		
		//version=STRING
		public Assignment getVersionAssignment_2() { return cVersionAssignment_2; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_2_0() { return cVersionSTRINGTerminalRuleCall_2_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_3() { return cControl000dControl000aKeyword_3; }
		
		//'Namespace:'
		public Keyword getNamespaceKeyword_4() { return cNamespaceKeyword_4; }
		
		//namespace=STRING
		public Assignment getNamespaceAssignment_5() { return cNamespaceAssignment_5; }
		
		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_5_0() { return cNamespaceSTRINGTerminalRuleCall_5_0; }
		
		//'\r'
		public Keyword getControl000dKeyword_6() { return cControl000dKeyword_6; }
		
		//'\r'
		public Keyword getControl000dKeyword_7() { return cControl000dKeyword_7; }
	}
	public class UsesStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.UsesStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_1_0 = (RuleCall)cNamespaceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamespaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cNamespaceAssignment_2_1.eContents().get(0);
		private final Keyword cControl000dKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cControl000dKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UsesStatement:
		//	'Uses:' namespace+=STRING (',' namespace+=STRING)* '\r' '\r';
		@Override public ParserRule getRule() { return rule; }
		
		//'Uses:' namespace+=STRING (',' namespace+=STRING)* '\r' '\r'
		public Group getGroup() { return cGroup; }
		
		//'Uses:'
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }
		
		//namespace+=STRING
		public Assignment getNamespaceAssignment_1() { return cNamespaceAssignment_1; }
		
		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_1_0() { return cNamespaceSTRINGTerminalRuleCall_1_0; }
		
		//(',' namespace+=STRING)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//namespace+=STRING
		public Assignment getNamespaceAssignment_2_1() { return cNamespaceAssignment_2_1; }
		
		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_2_1_0() { return cNamespaceSTRINGTerminalRuleCall_2_1_0; }
		
		//'\r'
		public Keyword getControl000dKeyword_3() { return cControl000dKeyword_3; }
		
		//'\r'
		public Keyword getControl000dKeyword_4() { return cControl000dKeyword_4; }
	}
	public class EntryElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.EntryElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBasedOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBasedOnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBasedOnSTRINGTerminalRuleCall_4_0 = (RuleCall)cBasedOnAssignment_4.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cConceptKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConceptAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConceptSTRINGTerminalRuleCall_7_0 = (RuleCall)cConceptAssignment_7.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cDescriptionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDescriptionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_10_0 = (RuleCall)cDescriptionAssignment_10.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cElementsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cElementsElementParserRuleCall_12_0 = (RuleCall)cElementsAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cControl000dControl000aKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cElementsAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_13_1_0 = (RuleCall)cElementsAssignment_13_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cControl0009Keyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cSubelementsAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cSubelementsEntryElementParserRuleCall_15_1_0 = (RuleCall)cSubelementsAssignment_15_1.eContents().get(0);
		private final Keyword cValueKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cValueAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cValueSTRINGTerminalRuleCall_17_0 = (RuleCall)cValueAssignment_17.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//EntryElement:
		//	'EntryElement' name=STRING '\r\n'
		//	'Based On:' basedOn=STRING '\r\n'
		//	'Concept:' concept=STRING '\r\n'
		//	'Description:' description=STRING '\r\n'
		//	elements+=Element? ('\r\n' elements+=Element)* '\r\n' ('\t' subelements+=EntryElement)*
		//	'Value:' value=STRING? '\r\n';
		@Override public ParserRule getRule() { return rule; }
		
		//'EntryElement' name=STRING '\r\n' 'Based On:' basedOn=STRING '\r\n' 'Concept:' concept=STRING '\r\n' 'Description:'
		//description=STRING '\r\n' elements+=Element? ('\r\n' elements+=Element)* '\r\n' ('\t' subelements+=EntryElement)*
		//'Value:' value=STRING? '\r\n'
		public Group getGroup() { return cGroup; }
		
		//'EntryElement'
		public Keyword getEntryElementKeyword_0() { return cEntryElementKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_2() { return cControl000dControl000aKeyword_2; }
		
		//'Based On:'
		public Keyword getBasedOnKeyword_3() { return cBasedOnKeyword_3; }
		
		//basedOn=STRING
		public Assignment getBasedOnAssignment_4() { return cBasedOnAssignment_4; }
		
		//STRING
		public RuleCall getBasedOnSTRINGTerminalRuleCall_4_0() { return cBasedOnSTRINGTerminalRuleCall_4_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_5() { return cControl000dControl000aKeyword_5; }
		
		//'Concept:'
		public Keyword getConceptKeyword_6() { return cConceptKeyword_6; }
		
		//concept=STRING
		public Assignment getConceptAssignment_7() { return cConceptAssignment_7; }
		
		//STRING
		public RuleCall getConceptSTRINGTerminalRuleCall_7_0() { return cConceptSTRINGTerminalRuleCall_7_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_8() { return cControl000dControl000aKeyword_8; }
		
		//'Description:'
		public Keyword getDescriptionKeyword_9() { return cDescriptionKeyword_9; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_10() { return cDescriptionAssignment_10; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_10_0() { return cDescriptionSTRINGTerminalRuleCall_10_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_11() { return cControl000dControl000aKeyword_11; }
		
		//elements+=Element?
		public Assignment getElementsAssignment_12() { return cElementsAssignment_12; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_12_0() { return cElementsElementParserRuleCall_12_0; }
		
		//('\r\n' elements+=Element)*
		public Group getGroup_13() { return cGroup_13; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_13_0() { return cControl000dControl000aKeyword_13_0; }
		
		//elements+=Element
		public Assignment getElementsAssignment_13_1() { return cElementsAssignment_13_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_13_1_0() { return cElementsElementParserRuleCall_13_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_14() { return cControl000dControl000aKeyword_14; }
		
		//('\t' subelements+=EntryElement)*
		public Group getGroup_15() { return cGroup_15; }
		
		//'\t'
		public Keyword getControl0009Keyword_15_0() { return cControl0009Keyword_15_0; }
		
		//subelements+=EntryElement
		public Assignment getSubelementsAssignment_15_1() { return cSubelementsAssignment_15_1; }
		
		//EntryElement
		public RuleCall getSubelementsEntryElementParserRuleCall_15_1_0() { return cSubelementsEntryElementParserRuleCall_15_1_0; }
		
		//'Value:'
		public Keyword getValueKeyword_16() { return cValueKeyword_16; }
		
		//value=STRING?
		public Assignment getValueAssignment_17() { return cValueAssignment_17; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_17_0() { return cValueSTRINGTerminalRuleCall_17_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_18() { return cControl000dControl000aKeyword_18; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerINTTerminalRuleCall_0_0 = (RuleCall)cLowerAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperINTTerminalRuleCall_2_0 = (RuleCall)cUpperAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Element:
		//	lower=INT '..' upper=INT name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//lower=INT '..' upper=INT name=STRING
		public Group getGroup() { return cGroup; }
		
		//lower=INT
		public Assignment getLowerAssignment_0() { return cLowerAssignment_0; }
		
		//INT
		public RuleCall getLowerINTTerminalRuleCall_0_0() { return cLowerINTTerminalRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//upper=INT
		public Assignment getUpperAssignment_2() { return cUpperAssignment_2; }
		
		//INT
		public RuleCall getUpperINTTerminalRuleCall_2_0() { return cUpperINTTerminalRuleCall_2_0; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final DocElements pDoc;
	private final DocHeaderElements pDocHeader;
	private final UsesStatementElements pUsesStatement;
	private final EntryElementElements pEntryElement;
	private final ElementElements pElement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CimplGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDoc = new DocElements();
		this.pDocHeader = new DocHeaderElements();
		this.pUsesStatement = new UsesStatementElements();
		this.pEntryElement = new EntryElementElements();
		this.pElement = new ElementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.standardhealh.cimpl.dsl.Cimpl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements=Doc?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Doc:
	//	header=DocHeader
	//	uses=UsesStatement
	//	entries+=EntryElement*;
	public DocElements getDocAccess() {
		return pDoc;
	}
	
	public ParserRule getDocRule() {
		return getDocAccess().getRule();
	}
	
	//// descriptionProp? usesStatement? pathDefs? vocabularyDefs? dataDefs);
	////	description=DescriptionProp
	//// DescriptionProp: 'Description:' STRING '\r';	
	//DocHeader:
	//	'Grammar:' 'DataElement' version=STRING '\r\n' 'Namespace:' namespace=STRING '\r' '\r';
	public DocHeaderElements getDocHeaderAccess() {
		return pDocHeader;
	}
	
	public ParserRule getDocHeaderRule() {
		return getDocHeaderAccess().getRule();
	}
	
	//UsesStatement:
	//	'Uses:' namespace+=STRING (',' namespace+=STRING)* '\r' '\r';
	public UsesStatementElements getUsesStatementAccess() {
		return pUsesStatement;
	}
	
	public ParserRule getUsesStatementRule() {
		return getUsesStatementAccess().getRule();
	}
	
	//EntryElement:
	//	'EntryElement' name=STRING '\r\n'
	//	'Based On:' basedOn=STRING '\r\n'
	//	'Concept:' concept=STRING '\r\n'
	//	'Description:' description=STRING '\r\n'
	//	elements+=Element? ('\r\n' elements+=Element)* '\r\n' ('\t' subelements+=EntryElement)*
	//	'Value:' value=STRING? '\r\n';
	public EntryElementElements getEntryElementAccess() {
		return pEntryElement;
	}
	
	public ParserRule getEntryElementRule() {
		return getEntryElementAccess().getRule();
	}
	
	//Element:
	//	lower=INT '..' upper=INT name=STRING;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
