/*
 * generated by Xtext 2.12.0
 */
package org.standardhealh.cimpl.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CimplGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Profile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Assignment cUsesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsesUsesStatementParserRuleCall_2_0 = (RuleCall)cUsesAssignment_2.eContents().get(0);
		private final Assignment cCodeSystemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCodeSystemsCodeSystemParserRuleCall_3_0 = (RuleCall)cCodeSystemsAssignment_3.eContents().get(0);
		private final Assignment cEntriesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntriesEntryElementParserRuleCall_4_0 = (RuleCall)cEntriesAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsElementParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		
		////Model:
		////	elements=Doc?;
		//Profile:
		//	header=Header
		//	description=Description
		//	uses=UsesStatement?
		//	codeSystems+=CodeSystem* entries+=EntryElement*
		//	elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//header=Header description=Description uses=UsesStatement? codeSystems+=CodeSystem* entries+=EntryElement*
		//elements+=Element*
		public Group getGroup() { return cGroup; }
		
		//header=Header
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }
		
		//Header
		public RuleCall getHeaderHeaderParserRuleCall_0_0() { return cHeaderHeaderParserRuleCall_0_0; }
		
		//description=Description
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_1_0() { return cDescriptionDescriptionParserRuleCall_1_0; }
		
		//uses=UsesStatement?
		public Assignment getUsesAssignment_2() { return cUsesAssignment_2; }
		
		//UsesStatement
		public RuleCall getUsesUsesStatementParserRuleCall_2_0() { return cUsesUsesStatementParserRuleCall_2_0; }
		
		//codeSystems+=CodeSystem*
		public Assignment getCodeSystemsAssignment_3() { return cCodeSystemsAssignment_3; }
		
		//CodeSystem
		public RuleCall getCodeSystemsCodeSystemParserRuleCall_3_0() { return cCodeSystemsCodeSystemParserRuleCall_3_0; }
		
		//entries+=EntryElement*
		public Assignment getEntriesAssignment_4() { return cEntriesAssignment_4; }
		
		//EntryElement
		public RuleCall getEntriesEntryElementParserRuleCall_4_0() { return cEntriesEntryElementParserRuleCall_4_0; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_5_0() { return cElementsElementParserRuleCall_5_0; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Keyword cCarriageReturnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// descriptionProp? usesStatement? pathDefs? vocabularyDefs? dataDefs);
		////	description=DescriptionProp
		//Description:
		//	'Description:' description=STRING '\r';
		@Override public ParserRule getRule() { return rule; }
		
		//'Description:' description=STRING '\r'
		public Group getGroup() { return cGroup; }
		
		//'Description:'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
		
		//'\r'
		public Keyword getCarriageReturnKeyword_2() { return cCarriageReturnKeyword_2; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGrammarDataElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionCIMPLSTRINGParserRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNamespaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNamespaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNamespaceCIMPLSTRINGParserRuleCall_4_0 = (RuleCall)cNamespaceAssignment_4.eContents().get(0);
		private final Keyword cCarriageReturnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Header:
		//	'Grammar:\tDataElement' version=CIMPLSTRING '\r\n' 'Namespace:' namespace=CIMPLSTRING '\r';
		@Override public ParserRule getRule() { return rule; }
		
		//'Grammar:\tDataElement' version=CIMPLSTRING '\r\n' 'Namespace:' namespace=CIMPLSTRING '\r'
		public Group getGroup() { return cGroup; }
		
		//'Grammar:\tDataElement'
		public Keyword getGrammarDataElementKeyword_0() { return cGrammarDataElementKeyword_0; }
		
		//version=CIMPLSTRING
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }
		
		//CIMPLSTRING
		public RuleCall getVersionCIMPLSTRINGParserRuleCall_1_0() { return cVersionCIMPLSTRINGParserRuleCall_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_2() { return cControl000dControl000aKeyword_2; }
		
		//'Namespace:'
		public Keyword getNamespaceKeyword_3() { return cNamespaceKeyword_3; }
		
		//namespace=CIMPLSTRING
		public Assignment getNamespaceAssignment_4() { return cNamespaceAssignment_4; }
		
		//CIMPLSTRING
		public RuleCall getNamespaceCIMPLSTRINGParserRuleCall_4_0() { return cNamespaceCIMPLSTRINGParserRuleCall_4_0; }
		
		//'\r'
		public Keyword getCarriageReturnKeyword_5() { return cCarriageReturnKeyword_5; }
	}
	public class UsesStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.UsesStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespaceCIMPLSTRINGParserRuleCall_1_0 = (RuleCall)cNamespaceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamespaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamespaceCIMPLSTRINGParserRuleCall_2_1_0 = (RuleCall)cNamespaceAssignment_2_1.eContents().get(0);
		private final Keyword cCarriageReturnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCarriageReturnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UsesStatement:
		//	'Uses:' namespace+=CIMPLSTRING (',' namespace+=CIMPLSTRING)* '\r' '\r';
		@Override public ParserRule getRule() { return rule; }
		
		//'Uses:' namespace+=CIMPLSTRING (',' namespace+=CIMPLSTRING)* '\r' '\r'
		public Group getGroup() { return cGroup; }
		
		//'Uses:'
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }
		
		//namespace+=CIMPLSTRING
		public Assignment getNamespaceAssignment_1() { return cNamespaceAssignment_1; }
		
		//CIMPLSTRING
		public RuleCall getNamespaceCIMPLSTRINGParserRuleCall_1_0() { return cNamespaceCIMPLSTRINGParserRuleCall_1_0; }
		
		//(',' namespace+=CIMPLSTRING)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//namespace+=CIMPLSTRING
		public Assignment getNamespaceAssignment_2_1() { return cNamespaceAssignment_2_1; }
		
		//CIMPLSTRING
		public RuleCall getNamespaceCIMPLSTRINGParserRuleCall_2_1_0() { return cNamespaceCIMPLSTRINGParserRuleCall_2_1_0; }
		
		//'\r'
		public Keyword getCarriageReturnKeyword_3() { return cCarriageReturnKeyword_3; }
		
		//'\r'
		public Keyword getCarriageReturnKeyword_4() { return cCarriageReturnKeyword_4; }
	}
	public class CodeSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.CodeSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCodeSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamespaceCIMPLSTRINGParserRuleCall_1_0 = (RuleCall)cNamespaceAssignment_1.eContents().get(0);
		private final Keyword cCarriageReturnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CodeSystem:
		//	'CodeSystem:' namespace=CIMPLSTRING '\r';
		@Override public ParserRule getRule() { return rule; }
		
		//'CodeSystem:' namespace=CIMPLSTRING '\r'
		public Group getGroup() { return cGroup; }
		
		//'CodeSystem:'
		public Keyword getCodeSystemKeyword_0() { return cCodeSystemKeyword_0; }
		
		//namespace=CIMPLSTRING
		public Assignment getNamespaceAssignment_1() { return cNamespaceAssignment_1; }
		
		//CIMPLSTRING
		public RuleCall getNamespaceCIMPLSTRINGParserRuleCall_1_0() { return cNamespaceCIMPLSTRINGParserRuleCall_1_0; }
		
		//'\r'
		public Keyword getCarriageReturnKeyword_2() { return cCarriageReturnKeyword_2; }
	}
	public class EntryElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.EntryElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCIMPLSTRINGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBasedOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBasedOnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBasedOnCIMPLSTRINGParserRuleCall_3_1_0 = (RuleCall)cBasedOnAssignment_3_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cConceptKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConceptAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConceptCIMPLSTRINGParserRuleCall_5_0 = (RuleCall)cConceptAssignment_5.eContents().get(0);
		private final Assignment cConceptDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConceptDescriptionSTRINGTerminalRuleCall_6_0 = (RuleCall)cConceptDescriptionAssignment_6.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cDescriptionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDescriptionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_9_0 = (RuleCall)cDescriptionAssignment_9.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cRedefinitionsAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cRedefinitionsRedefinitionParserRuleCall_11_0_0 = (RuleCall)cRedefinitionsAssignment_11_0.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Keyword cControl000dControl000aKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final Assignment cRedefinitionsAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cRedefinitionsRedefinitionParserRuleCall_11_1_1_0 = (RuleCall)cRedefinitionsAssignment_11_1_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cSubsetsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cSubsetsSubsetsParserRuleCall_12_0 = (RuleCall)cSubsetsAssignment_12.eContents().get(0);
		
		//EntryElement:
		//	'\r\nEntryElement:' name=CIMPLSTRING '\r\n' ('Based on:' basedOn=CIMPLSTRING '\r\n')?
		//	'Concept:' concept=CIMPLSTRING conceptDescription=STRING '\r\n'
		//	'Description:' description=STRING '\r\n' (redefinitions+=Redefinition? ('\r\n' redefinitions+=Redefinition)* '\r\n')
		//	subsets+=Subsets?;
		@Override public ParserRule getRule() { return rule; }
		
		//'\r\nEntryElement:' name=CIMPLSTRING '\r\n' ('Based on:' basedOn=CIMPLSTRING '\r\n')? 'Concept:' concept=CIMPLSTRING
		//conceptDescription=STRING '\r\n' 'Description:' description=STRING '\r\n' (redefinitions+=Redefinition? ('\r\n'
		//redefinitions+=Redefinition)* '\r\n') subsets+=Subsets?
		public Group getGroup() { return cGroup; }
		
		//'\r\nEntryElement:'
		public Keyword getEntryElementKeyword_0() { return cEntryElementKeyword_0; }
		
		//name=CIMPLSTRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CIMPLSTRING
		public RuleCall getNameCIMPLSTRINGParserRuleCall_1_0() { return cNameCIMPLSTRINGParserRuleCall_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_2() { return cControl000dControl000aKeyword_2; }
		
		//('Based on:' basedOn=CIMPLSTRING '\r\n')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Based on:'
		public Keyword getBasedOnKeyword_3_0() { return cBasedOnKeyword_3_0; }
		
		//basedOn=CIMPLSTRING
		public Assignment getBasedOnAssignment_3_1() { return cBasedOnAssignment_3_1; }
		
		//CIMPLSTRING
		public RuleCall getBasedOnCIMPLSTRINGParserRuleCall_3_1_0() { return cBasedOnCIMPLSTRINGParserRuleCall_3_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_3_2() { return cControl000dControl000aKeyword_3_2; }
		
		//'Concept:'
		public Keyword getConceptKeyword_4() { return cConceptKeyword_4; }
		
		//concept=CIMPLSTRING
		public Assignment getConceptAssignment_5() { return cConceptAssignment_5; }
		
		//CIMPLSTRING
		public RuleCall getConceptCIMPLSTRINGParserRuleCall_5_0() { return cConceptCIMPLSTRINGParserRuleCall_5_0; }
		
		//conceptDescription=STRING
		public Assignment getConceptDescriptionAssignment_6() { return cConceptDescriptionAssignment_6; }
		
		//STRING
		public RuleCall getConceptDescriptionSTRINGTerminalRuleCall_6_0() { return cConceptDescriptionSTRINGTerminalRuleCall_6_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_7() { return cControl000dControl000aKeyword_7; }
		
		//'Description:'
		public Keyword getDescriptionKeyword_8() { return cDescriptionKeyword_8; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_9() { return cDescriptionAssignment_9; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_9_0() { return cDescriptionSTRINGTerminalRuleCall_9_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_10() { return cControl000dControl000aKeyword_10; }
		
		//redefinitions+=Redefinition? ('\r\n' redefinitions+=Redefinition)* '\r\n'
		public Group getGroup_11() { return cGroup_11; }
		
		//redefinitions+=Redefinition?
		public Assignment getRedefinitionsAssignment_11_0() { return cRedefinitionsAssignment_11_0; }
		
		//Redefinition
		public RuleCall getRedefinitionsRedefinitionParserRuleCall_11_0_0() { return cRedefinitionsRedefinitionParserRuleCall_11_0_0; }
		
		//('\r\n' redefinitions+=Redefinition)*
		public Group getGroup_11_1() { return cGroup_11_1; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_11_1_0() { return cControl000dControl000aKeyword_11_1_0; }
		
		//redefinitions+=Redefinition
		public Assignment getRedefinitionsAssignment_11_1_1() { return cRedefinitionsAssignment_11_1_1; }
		
		//Redefinition
		public RuleCall getRedefinitionsRedefinitionParserRuleCall_11_1_1_0() { return cRedefinitionsRedefinitionParserRuleCall_11_1_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_11_2() { return cControl000dControl000aKeyword_11_2; }
		
		//subsets+=Subsets?
		public Assignment getSubsetsAssignment_12() { return cSubsetsAssignment_12; }
		
		//Subsets
		public RuleCall getSubsetsSubsetsParserRuleCall_12_0() { return cSubsetsSubsetsParserRuleCall_12_0; }
	}
	public class SubsetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Subsets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameCIMPLSTRINGParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubsetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubsetsSubsetParserRuleCall_2_0 = (RuleCall)cSubsetsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cControl000dControl000aKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSubsetsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSubsetsSubsetParserRuleCall_3_1_0 = (RuleCall)cSubsetsAssignment_3_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////('\tEvaluationComponent\r\n'(evaluationSubsets+=Subset)? ('\r\n' evaluationSubsets+=Subset)*'\r\n')?
		////('\tPanelMembers.Observation\r\n'(observationSubsets+=Subset)? ('\r\n' observationSubsets+=Subset)*'\r\n')?;
		//Subsets:
		//	name=CIMPLSTRING '\r\n' subsets+=Subset? ('\r\n' subsets+=Subset)* '\r\n';
		@Override public ParserRule getRule() { return rule; }
		
		//name=CIMPLSTRING '\r\n' subsets+=Subset? ('\r\n' subsets+=Subset)* '\r\n'
		public Group getGroup() { return cGroup; }
		
		//name=CIMPLSTRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//CIMPLSTRING
		public RuleCall getNameCIMPLSTRINGParserRuleCall_0_0() { return cNameCIMPLSTRINGParserRuleCall_0_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_1() { return cControl000dControl000aKeyword_1; }
		
		//subsets+=Subset?
		public Assignment getSubsetsAssignment_2() { return cSubsetsAssignment_2; }
		
		//Subset
		public RuleCall getSubsetsSubsetParserRuleCall_2_0() { return cSubsetsSubsetParserRuleCall_2_0; }
		
		//('\r\n' subsets+=Subset)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_3_0() { return cControl000dControl000aKeyword_3_0; }
		
		//subsets+=Subset
		public Assignment getSubsetsAssignment_3_1() { return cSubsetsAssignment_3_1; }
		
		//Subset
		public RuleCall getSubsetsSubsetParserRuleCall_3_1_0() { return cSubsetsSubsetParserRuleCall_3_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_4() { return cControl000dControl000aKeyword_4; }
	}
	public class SubsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Subset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCardinalityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCardinalityCardinalityParserRuleCall_1_0 = (RuleCall)cCardinalityAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameCIMPLSTRINGParserRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		
		//Subset:
		//	'includes' cardinality=Cardinality typeName=CIMPLSTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'includes' cardinality=Cardinality typeName=CIMPLSTRING
		public Group getGroup() { return cGroup; }
		
		//'includes'
		public Keyword getIncludesKeyword_0() { return cIncludesKeyword_0; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_1() { return cCardinalityAssignment_1; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_1_0() { return cCardinalityCardinalityParserRuleCall_1_0; }
		
		//typeName=CIMPLSTRING
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//CIMPLSTRING
		public RuleCall getTypeNameCIMPLSTRINGParserRuleCall_2_0() { return cTypeNameCIMPLSTRINGParserRuleCall_2_0; }
	}
	public class RedefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Redefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCardinalityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCardinalityCardinalityParserRuleCall_0_0 = (RuleCall)cCardinalityAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCIMPLSTRINGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Redefinition:
		//	cardinality=Cardinality? name=CIMPLSTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//cardinality=Cardinality? name=CIMPLSTRING
		public Group getGroup() { return cGroup; }
		
		//cardinality=Cardinality?
		public Assignment getCardinalityAssignment_0() { return cCardinalityAssignment_0; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_0_0() { return cCardinalityCardinalityParserRuleCall_0_0; }
		
		//name=CIMPLSTRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CIMPLSTRING
		public RuleCall getNameCIMPLSTRINGParserRuleCall_1_0() { return cNameCIMPLSTRINGParserRuleCall_1_0; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerINTTerminalRuleCall_0_0 = (RuleCall)cLowerAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperINTTerminalRuleCall_2_0 = (RuleCall)cUpperAssignment_2.eContents().get(0);
		
		//Cardinality:
		//	lower=INT '..' upper=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//lower=INT '..' upper=INT
		public Group getGroup() { return cGroup; }
		
		//lower=INT
		public Assignment getLowerAssignment_0() { return cLowerAssignment_0; }
		
		//INT
		public RuleCall getLowerINTTerminalRuleCall_0_0() { return cLowerINTTerminalRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//upper=INT
		public Assignment getUpperAssignment_2() { return cUpperAssignment_2; }
		
		//INT
		public RuleCall getUpperINTTerminalRuleCall_2_0() { return cUpperINTTerminalRuleCall_2_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCIMPLSTRINGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBasedOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBasedOnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBasedOnCIMPLSTRINGParserRuleCall_3_1_0 = (RuleCall)cBasedOnAssignment_3_1.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cConceptKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConceptAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConceptCIMPLSTRINGParserRuleCall_5_0 = (RuleCall)cConceptAssignment_5.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cValueKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cValueAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cValueCIMPLSTRINGParserRuleCall_11_0 = (RuleCall)cValueAssignment_11.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Element:
		//	'\r\nElement:' name=CIMPLSTRING '\r\n' ('Based on:' basedOn=CIMPLSTRING '\r\n')?
		//	'Concept:' concept=CIMPLSTRING '\r\n'
		//	'Description:' description=STRING '\r\n'
		//	'Value:' value=CIMPLSTRING '\r\n';
		@Override public ParserRule getRule() { return rule; }
		
		//'\r\nElement:' name=CIMPLSTRING '\r\n' ('Based on:' basedOn=CIMPLSTRING '\r\n')? 'Concept:' concept=CIMPLSTRING '\r\n'
		//'Description:' description=STRING '\r\n' 'Value:' value=CIMPLSTRING '\r\n'
		public Group getGroup() { return cGroup; }
		
		//'\r\nElement:'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//name=CIMPLSTRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CIMPLSTRING
		public RuleCall getNameCIMPLSTRINGParserRuleCall_1_0() { return cNameCIMPLSTRINGParserRuleCall_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_2() { return cControl000dControl000aKeyword_2; }
		
		//('Based on:' basedOn=CIMPLSTRING '\r\n')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Based on:'
		public Keyword getBasedOnKeyword_3_0() { return cBasedOnKeyword_3_0; }
		
		//basedOn=CIMPLSTRING
		public Assignment getBasedOnAssignment_3_1() { return cBasedOnAssignment_3_1; }
		
		//CIMPLSTRING
		public RuleCall getBasedOnCIMPLSTRINGParserRuleCall_3_1_0() { return cBasedOnCIMPLSTRINGParserRuleCall_3_1_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_3_2() { return cControl000dControl000aKeyword_3_2; }
		
		//'Concept:'
		public Keyword getConceptKeyword_4() { return cConceptKeyword_4; }
		
		//concept=CIMPLSTRING
		public Assignment getConceptAssignment_5() { return cConceptAssignment_5; }
		
		//CIMPLSTRING
		public RuleCall getConceptCIMPLSTRINGParserRuleCall_5_0() { return cConceptCIMPLSTRINGParserRuleCall_5_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_6() { return cControl000dControl000aKeyword_6; }
		
		//'Description:'
		public Keyword getDescriptionKeyword_7() { return cDescriptionKeyword_7; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_0() { return cDescriptionSTRINGTerminalRuleCall_8_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_9() { return cControl000dControl000aKeyword_9; }
		
		//'Value:'
		public Keyword getValueKeyword_10() { return cValueKeyword_10; }
		
		//value=CIMPLSTRING
		public Assignment getValueAssignment_11() { return cValueAssignment_11; }
		
		//CIMPLSTRING
		public RuleCall getValueCIMPLSTRINGParserRuleCall_11_0() { return cValueCIMPLSTRINGParserRuleCall_11_0; }
		
		//'\r\n'
		public Keyword getControl000dControl000aKeyword_12() { return cControl000dControl000aKeyword_12; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCodeableConceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuantityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	CodeableConcept | Quantity;
		@Override public ParserRule getRule() { return rule; }
		
		//CodeableConcept | Quantity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CodeableConcept
		public RuleCall getCodeableConceptParserRuleCall_0() { return cCodeableConceptParserRuleCall_0; }
		
		//Quantity
		public RuleCall getQuantityParserRuleCall_1() { return cQuantityParserRuleCall_1; }
	}
	public class CodeableConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.CodeableConcept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCodeableConceptFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueSetURLAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSetURLCIMPLSTRINGParserRuleCall_1_0 = (RuleCall)cValueSetURLAssignment_1.eContents().get(0);
		
		//CodeableConcept:
		//	'CodeableConcept from' valueSetURL=CIMPLSTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'CodeableConcept from' valueSetURL=CIMPLSTRING
		public Group getGroup() { return cGroup; }
		
		//'CodeableConcept from'
		public Keyword getCodeableConceptFromKeyword_0() { return cCodeableConceptFromKeyword_0; }
		
		//valueSetURL=CIMPLSTRING
		public Assignment getValueSetURLAssignment_1() { return cValueSetURLAssignment_1; }
		
		//CIMPLSTRING
		public RuleCall getValueSetURLCIMPLSTRINGParserRuleCall_1_0() { return cValueSetURLCIMPLSTRINGParserRuleCall_1_0; }
	}
	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuantityWithUnitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUnitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitsCIMPLSTRINGParserRuleCall_1_0 = (RuleCall)cUnitsAssignment_1.eContents().get(0);
		
		//Quantity:
		//	'Quantity with units' units=CIMPLSTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Quantity with units' units=CIMPLSTRING
		public Group getGroup() { return cGroup; }
		
		//'Quantity with units'
		public Keyword getQuantityWithUnitsKeyword_0() { return cQuantityWithUnitsKeyword_0; }
		
		//units=CIMPLSTRING
		public Assignment getUnitsAssignment_1() { return cUnitsAssignment_1; }
		
		//CIMPLSTRING
		public RuleCall getUnitsCIMPLSTRINGParserRuleCall_1_0() { return cUnitsCIMPLSTRINGParserRuleCall_1_0; }
	}
	public class CIMPLSTRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.CIMPLSTRING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSpaceKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExclamationMarkKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSectionSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPercentSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAmpersandKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cQuestionMarkKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAsteriskKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPlusSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cFullStopKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cHyphenMinusKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cVerticalLineKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cLeftSquareBracketKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cRightSquareBracketKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		
		//CIMPLSTRING:
		//	' ' | '/' | ';' | ',' | '!' | '§' | '%' | '&' | '(' | ')' | '?' | '*' | '+' | '.' | '-' | '|' | '[' | ']';
		@Override public ParserRule getRule() { return rule; }
		
		//' ' | '/' | ';' | ',' | '!' | '§' | '%' | '&' | '(' | ')' | '?' | '*' | '+' | '.' | '-' | '|' | '[' | ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//' '
		public Keyword getSpaceKeyword_0() { return cSpaceKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_4() { return cExclamationMarkKeyword_4; }
		
		//'§'
		public Keyword getSectionSignKeyword_5() { return cSectionSignKeyword_5; }
		
		//'%'
		public Keyword getPercentSignKeyword_6() { return cPercentSignKeyword_6; }
		
		//'&'
		public Keyword getAmpersandKeyword_7() { return cAmpersandKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_10() { return cQuestionMarkKeyword_10; }
		
		//'*'
		public Keyword getAsteriskKeyword_11() { return cAsteriskKeyword_11; }
		
		//'+'
		public Keyword getPlusSignKeyword_12() { return cPlusSignKeyword_12; }
		
		//'.'
		public Keyword getFullStopKeyword_13() { return cFullStopKeyword_13; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_14() { return cHyphenMinusKeyword_14; }
		
		//'|'
		public Keyword getVerticalLineKeyword_15() { return cVerticalLineKeyword_15; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_16() { return cLeftSquareBracketKeyword_16; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_17() { return cRightSquareBracketKeyword_17; }
	}
	
	
	private final ProfileElements pProfile;
	private final DescriptionElements pDescription;
	private final HeaderElements pHeader;
	private final UsesStatementElements pUsesStatement;
	private final CodeSystemElements pCodeSystem;
	private final EntryElementElements pEntryElement;
	private final SubsetsElements pSubsets;
	private final SubsetElements pSubset;
	private final RedefinitionElements pRedefinition;
	private final CardinalityElements pCardinality;
	private final ElementElements pElement;
	private final ValueElements pValue;
	private final CodeableConceptElements pCodeableConcept;
	private final QuantityElements pQuantity;
	private final CIMPLSTRINGElements pCIMPLSTRING;
	private final TerminalRule tBASEDON;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CimplGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProfile = new ProfileElements();
		this.pDescription = new DescriptionElements();
		this.pHeader = new HeaderElements();
		this.pUsesStatement = new UsesStatementElements();
		this.pCodeSystem = new CodeSystemElements();
		this.pEntryElement = new EntryElementElements();
		this.pSubsets = new SubsetsElements();
		this.pSubset = new SubsetElements();
		this.pRedefinition = new RedefinitionElements();
		this.pCardinality = new CardinalityElements();
		this.pElement = new ElementElements();
		this.pValue = new ValueElements();
		this.pCodeableConcept = new CodeableConceptElements();
		this.pQuantity = new QuantityElements();
		this.pCIMPLSTRING = new CIMPLSTRINGElements();
		this.tBASEDON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.standardhealh.cimpl.dsl.Cimpl.BASEDON");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.standardhealh.cimpl.dsl.Cimpl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Model:
	////	elements=Doc?;
	//Profile:
	//	header=Header
	//	description=Description
	//	uses=UsesStatement?
	//	codeSystems+=CodeSystem* entries+=EntryElement*
	//	elements+=Element*;
	public ProfileElements getProfileAccess() {
		return pProfile;
	}
	
	public ParserRule getProfileRule() {
		return getProfileAccess().getRule();
	}
	
	//// descriptionProp? usesStatement? pathDefs? vocabularyDefs? dataDefs);
	////	description=DescriptionProp
	//Description:
	//	'Description:' description=STRING '\r';
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//Header:
	//	'Grammar:\tDataElement' version=CIMPLSTRING '\r\n' 'Namespace:' namespace=CIMPLSTRING '\r';
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//UsesStatement:
	//	'Uses:' namespace+=CIMPLSTRING (',' namespace+=CIMPLSTRING)* '\r' '\r';
	public UsesStatementElements getUsesStatementAccess() {
		return pUsesStatement;
	}
	
	public ParserRule getUsesStatementRule() {
		return getUsesStatementAccess().getRule();
	}
	
	//CodeSystem:
	//	'CodeSystem:' namespace=CIMPLSTRING '\r';
	public CodeSystemElements getCodeSystemAccess() {
		return pCodeSystem;
	}
	
	public ParserRule getCodeSystemRule() {
		return getCodeSystemAccess().getRule();
	}
	
	//EntryElement:
	//	'\r\nEntryElement:' name=CIMPLSTRING '\r\n' ('Based on:' basedOn=CIMPLSTRING '\r\n')?
	//	'Concept:' concept=CIMPLSTRING conceptDescription=STRING '\r\n'
	//	'Description:' description=STRING '\r\n' (redefinitions+=Redefinition? ('\r\n' redefinitions+=Redefinition)* '\r\n')
	//	subsets+=Subsets?;
	public EntryElementElements getEntryElementAccess() {
		return pEntryElement;
	}
	
	public ParserRule getEntryElementRule() {
		return getEntryElementAccess().getRule();
	}
	
	////('\tEvaluationComponent\r\n'(evaluationSubsets+=Subset)? ('\r\n' evaluationSubsets+=Subset)*'\r\n')?
	////('\tPanelMembers.Observation\r\n'(observationSubsets+=Subset)? ('\r\n' observationSubsets+=Subset)*'\r\n')?;
	//Subsets:
	//	name=CIMPLSTRING '\r\n' subsets+=Subset? ('\r\n' subsets+=Subset)* '\r\n';
	public SubsetsElements getSubsetsAccess() {
		return pSubsets;
	}
	
	public ParserRule getSubsetsRule() {
		return getSubsetsAccess().getRule();
	}
	
	//Subset:
	//	'includes' cardinality=Cardinality typeName=CIMPLSTRING;
	public SubsetElements getSubsetAccess() {
		return pSubset;
	}
	
	public ParserRule getSubsetRule() {
		return getSubsetAccess().getRule();
	}
	
	//Redefinition:
	//	cardinality=Cardinality? name=CIMPLSTRING;
	public RedefinitionElements getRedefinitionAccess() {
		return pRedefinition;
	}
	
	public ParserRule getRedefinitionRule() {
		return getRedefinitionAccess().getRule();
	}
	
	//Cardinality:
	//	lower=INT '..' upper=INT;
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//Element:
	//	'\r\nElement:' name=CIMPLSTRING '\r\n' ('Based on:' basedOn=CIMPLSTRING '\r\n')?
	//	'Concept:' concept=CIMPLSTRING '\r\n'
	//	'Description:' description=STRING '\r\n'
	//	'Value:' value=CIMPLSTRING '\r\n';
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Value:
	//	CodeableConcept | Quantity;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//CodeableConcept:
	//	'CodeableConcept from' valueSetURL=CIMPLSTRING;
	public CodeableConceptElements getCodeableConceptAccess() {
		return pCodeableConcept;
	}
	
	public ParserRule getCodeableConceptRule() {
		return getCodeableConceptAccess().getRule();
	}
	
	//Quantity:
	//	'Quantity with units' units=CIMPLSTRING;
	public QuantityElements getQuantityAccess() {
		return pQuantity;
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}
	
	//CIMPLSTRING:
	//	' ' | '/' | ';' | ',' | '!' | '§' | '%' | '&' | '(' | ')' | '?' | '*' | '+' | '.' | '-' | '|' | '[' | ']';
	public CIMPLSTRINGElements getCIMPLSTRINGAccess() {
		return pCIMPLSTRING;
	}
	
	public ParserRule getCIMPLSTRINGRule() {
		return getCIMPLSTRINGAccess().getRule();
	}
	
	//terminal BASEDON:
	//	'Based on';
	public TerminalRule getBASEDONRule() {
		return tBASEDON;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
