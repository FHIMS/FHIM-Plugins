/**
 * generated by Xtext 2.12.0
 */
package org.standardhealh.cimpl.dsl.cimpl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.standardhealh.cimpl.dsl.cimpl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CimplFactoryImpl extends EFactoryImpl implements CimplFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CimplFactory init()
  {
    try
    {
      CimplFactory theCimplFactory = (CimplFactory)EPackage.Registry.INSTANCE.getEFactory(CimplPackage.eNS_URI);
      if (theCimplFactory != null)
      {
        return theCimplFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CimplFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CimplFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CimplPackage.PROFILE: return createProfile();
      case CimplPackage.DESCRIPTION: return createDescription();
      case CimplPackage.HEADER: return createHeader();
      case CimplPackage.USES_STATEMENT: return createUsesStatement();
      case CimplPackage.CODE_SYSTEM: return createCodeSystem();
      case CimplPackage.ENTRY_ELEMENT: return createEntryElement();
      case CimplPackage.SUBSETS: return createSubsets();
      case CimplPackage.SUBSET: return createSubset();
      case CimplPackage.REDEFINITION: return createRedefinition();
      case CimplPackage.CARDINALITY: return createCardinality();
      case CimplPackage.ELEMENT: return createElement();
      case CimplPackage.VALUE: return createValue();
      case CimplPackage.CODEABLE_CONCEPT: return createCodeableConcept();
      case CimplPackage.QUANTITY: return createQuantity();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Profile createProfile()
  {
    ProfileImpl profile = new ProfileImpl();
    return profile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Description createDescription()
  {
    DescriptionImpl description = new DescriptionImpl();
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Header createHeader()
  {
    HeaderImpl header = new HeaderImpl();
    return header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UsesStatement createUsesStatement()
  {
    UsesStatementImpl usesStatement = new UsesStatementImpl();
    return usesStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CodeSystem createCodeSystem()
  {
    CodeSystemImpl codeSystem = new CodeSystemImpl();
    return codeSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EntryElement createEntryElement()
  {
    EntryElementImpl entryElement = new EntryElementImpl();
    return entryElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Subsets createSubsets()
  {
    SubsetsImpl subsets = new SubsetsImpl();
    return subsets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Subset createSubset()
  {
    SubsetImpl subset = new SubsetImpl();
    return subset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Redefinition createRedefinition()
  {
    RedefinitionImpl redefinition = new RedefinitionImpl();
    return redefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cardinality createCardinality()
  {
    CardinalityImpl cardinality = new CardinalityImpl();
    return cardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CodeableConcept createCodeableConcept()
  {
    CodeableConceptImpl codeableConcept = new CodeableConceptImpl();
    return codeableConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Quantity createQuantity()
  {
    QuantityImpl quantity = new QuantityImpl();
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CimplPackage getCimplPackage()
  {
    return (CimplPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CimplPackage getPackage()
  {
    return CimplPackage.eINSTANCE;
  }

} //CimplFactoryImpl
