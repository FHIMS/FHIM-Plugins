/*
 * generated by Xtext 2.12.0
 */
package org.standardhealh.cimpl.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.standardhealh.cimpl.dsl.cimpl.Cardinality;
import org.standardhealh.cimpl.dsl.cimpl.CimplPackage;
import org.standardhealh.cimpl.dsl.cimpl.CodeSystem;
import org.standardhealh.cimpl.dsl.cimpl.CodeableConcept;
import org.standardhealh.cimpl.dsl.cimpl.Description;
import org.standardhealh.cimpl.dsl.cimpl.Element;
import org.standardhealh.cimpl.dsl.cimpl.EntryElement;
import org.standardhealh.cimpl.dsl.cimpl.Header;
import org.standardhealh.cimpl.dsl.cimpl.Profile;
import org.standardhealh.cimpl.dsl.cimpl.Quantity;
import org.standardhealh.cimpl.dsl.cimpl.Redefinition;
import org.standardhealh.cimpl.dsl.cimpl.Subset;
import org.standardhealh.cimpl.dsl.cimpl.Subsets;
import org.standardhealh.cimpl.dsl.cimpl.UsesStatement;
import org.standardhealh.cimpl.dsl.services.CimplGrammarAccess;

@SuppressWarnings("all")
public class CimplSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CimplGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CimplPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CimplPackage.CARDINALITY:
				sequence_Cardinality(context, (Cardinality) semanticObject); 
				return; 
			case CimplPackage.CODE_SYSTEM:
				sequence_CodeSystem(context, (CodeSystem) semanticObject); 
				return; 
			case CimplPackage.CODEABLE_CONCEPT:
				sequence_CodeableConcept(context, (CodeableConcept) semanticObject); 
				return; 
			case CimplPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case CimplPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case CimplPackage.ENTRY_ELEMENT:
				sequence_EntryElement(context, (EntryElement) semanticObject); 
				return; 
			case CimplPackage.HEADER:
				sequence_Header(context, (Header) semanticObject); 
				return; 
			case CimplPackage.PROFILE:
				sequence_Profile(context, (Profile) semanticObject); 
				return; 
			case CimplPackage.QUANTITY:
				sequence_Quantity(context, (Quantity) semanticObject); 
				return; 
			case CimplPackage.REDEFINITION:
				sequence_Redefinition(context, (Redefinition) semanticObject); 
				return; 
			case CimplPackage.SUBSET:
				sequence_Subset(context, (Subset) semanticObject); 
				return; 
			case CimplPackage.SUBSETS:
				sequence_Subsets(context, (Subsets) semanticObject); 
				return; 
			case CimplPackage.USES_STATEMENT:
				sequence_UsesStatement(context, (UsesStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Cardinality returns Cardinality
	 *
	 * Constraint:
	 *     (lower=INT upper=INT)
	 */
	protected void sequence_Cardinality(ISerializationContext context, Cardinality semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.CARDINALITY__LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.CARDINALITY__LOWER));
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.CARDINALITY__UPPER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.CARDINALITY__UPPER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCardinalityAccess().getLowerINTTerminalRuleCall_0_0(), semanticObject.getLower());
		feeder.accept(grammarAccess.getCardinalityAccess().getUpperINTTerminalRuleCall_2_0(), semanticObject.getUpper());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeSystem returns CodeSystem
	 *
	 * Constraint:
	 *     namespace=CIMPLSTRING
	 */
	protected void sequence_CodeSystem(ISerializationContext context, CodeSystem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.CODE_SYSTEM__NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.CODE_SYSTEM__NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeSystemAccess().getNamespaceCIMPLSTRINGParserRuleCall_1_0(), semanticObject.getNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns CodeableConcept
	 *     CodeableConcept returns CodeableConcept
	 *
	 * Constraint:
	 *     valueSetURL=CIMPLSTRING
	 */
	protected void sequence_CodeableConcept(ISerializationContext context, CodeableConcept semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.CODEABLE_CONCEPT__VALUE_SET_URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.CODEABLE_CONCEPT__VALUE_SET_URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeableConceptAccess().getValueSetURLCIMPLSTRINGParserRuleCall_1_0(), semanticObject.getValueSetURL());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     description=STRING
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.DESCRIPTION__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.DESCRIPTION__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getDescriptionSTRINGTerminalRuleCall_1_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (name=CIMPLSTRING basedOn=CIMPLSTRING? concept=CIMPLSTRING description=STRING value=CIMPLSTRING)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntryElement returns EntryElement
	 *
	 * Constraint:
	 *     (
	 *         name=CIMPLSTRING 
	 *         basedOn=CIMPLSTRING? 
	 *         concept=CIMPLSTRING 
	 *         conceptDescription=STRING 
	 *         description=STRING 
	 *         redefinitions+=Redefinition? 
	 *         redefinitions+=Redefinition* 
	 *         subsets+=Subsets?
	 *     )
	 */
	protected void sequence_EntryElement(ISerializationContext context, EntryElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Header returns Header
	 *
	 * Constraint:
	 *     (version=CIMPLSTRING namespace=CIMPLSTRING)
	 */
	protected void sequence_Header(ISerializationContext context, Header semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.HEADER__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.HEADER__VERSION));
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.HEADER__NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.HEADER__NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeaderAccess().getVersionCIMPLSTRINGParserRuleCall_1_0(), semanticObject.getVersion());
		feeder.accept(grammarAccess.getHeaderAccess().getNamespaceCIMPLSTRINGParserRuleCall_4_0(), semanticObject.getNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Profile returns Profile
	 *
	 * Constraint:
	 *     (
	 *         header=Header 
	 *         description=Description 
	 *         uses=UsesStatement? 
	 *         codeSystems+=CodeSystem* 
	 *         entries+=EntryElement* 
	 *         elements+=Element*
	 *     )
	 */
	protected void sequence_Profile(ISerializationContext context, Profile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Quantity
	 *     Quantity returns Quantity
	 *
	 * Constraint:
	 *     units=CIMPLSTRING
	 */
	protected void sequence_Quantity(ISerializationContext context, Quantity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.QUANTITY__UNITS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.QUANTITY__UNITS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuantityAccess().getUnitsCIMPLSTRINGParserRuleCall_1_0(), semanticObject.getUnits());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Redefinition returns Redefinition
	 *
	 * Constraint:
	 *     (cardinality=Cardinality? name=CIMPLSTRING)
	 */
	protected void sequence_Redefinition(ISerializationContext context, Redefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subset returns Subset
	 *
	 * Constraint:
	 *     (cardinality=Cardinality typeName=CIMPLSTRING)
	 */
	protected void sequence_Subset(ISerializationContext context, Subset semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.SUBSET__CARDINALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.SUBSET__CARDINALITY));
			if (transientValues.isValueTransient(semanticObject, CimplPackage.Literals.SUBSET__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CimplPackage.Literals.SUBSET__TYPE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubsetAccess().getCardinalityCardinalityParserRuleCall_1_0(), semanticObject.getCardinality());
		feeder.accept(grammarAccess.getSubsetAccess().getTypeNameCIMPLSTRINGParserRuleCall_2_0(), semanticObject.getTypeName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Subsets returns Subsets
	 *
	 * Constraint:
	 *     (name=CIMPLSTRING subsets+=Subset? subsets+=Subset*)
	 */
	protected void sequence_Subsets(ISerializationContext context, Subsets semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UsesStatement returns UsesStatement
	 *
	 * Constraint:
	 *     (namespace+=CIMPLSTRING namespace+=CIMPLSTRING*)
	 */
	protected void sequence_UsesStatement(ISerializationContext context, UsesStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
