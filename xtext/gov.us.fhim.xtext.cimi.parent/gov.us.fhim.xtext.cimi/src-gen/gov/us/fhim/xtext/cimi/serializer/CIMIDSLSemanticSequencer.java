/*
 * generated by Xtext 2.10.0
 */
package gov.us.fhim.xtext.cimi.serializer;

import com.google.inject.Inject;
import gov.us.fhim.xtext.cimi.cIMIDSL.Archetype;
import gov.us.fhim.xtext.cimi.cIMIDSL.ArchetypeModel;
import gov.us.fhim.xtext.cimi.cIMIDSL.CIMIDSLPackage;
import gov.us.fhim.xtext.cimi.cIMIDSL.Description;
import gov.us.fhim.xtext.cimi.cIMIDSL.Details;
import gov.us.fhim.xtext.cimi.cIMIDSL.Languge;
import gov.us.fhim.xtext.cimi.cIMIDSL.Matches;
import gov.us.fhim.xtext.cimi.cIMIDSL.OriginalAuthor;
import gov.us.fhim.xtext.cimi.cIMIDSL.OtherDetails;
import gov.us.fhim.xtext.cimi.cIMIDSL.TermBinding;
import gov.us.fhim.xtext.cimi.cIMIDSL.TermBindings;
import gov.us.fhim.xtext.cimi.cIMIDSL.TermDefinition;
import gov.us.fhim.xtext.cimi.cIMIDSL.TermDefinitions;
import gov.us.fhim.xtext.cimi.cIMIDSL.Terminology;
import gov.us.fhim.xtext.cimi.services.CIMIDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CIMIDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CIMIDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CIMIDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CIMIDSLPackage.ARCHETYPE:
				sequence_Archetype(context, (Archetype) semanticObject); 
				return; 
			case CIMIDSLPackage.ARCHETYPE_MODEL:
				sequence_ArchetypeModel(context, (ArchetypeModel) semanticObject); 
				return; 
			case CIMIDSLPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case CIMIDSLPackage.DETAILS:
				sequence_Details(context, (Details) semanticObject); 
				return; 
			case CIMIDSLPackage.LANGUGE:
				sequence_Languge(context, (Languge) semanticObject); 
				return; 
			case CIMIDSLPackage.MATCHES:
				sequence_Matches(context, (Matches) semanticObject); 
				return; 
			case CIMIDSLPackage.ORIGINAL_AUTHOR:
				sequence_OriginalAuthor(context, (OriginalAuthor) semanticObject); 
				return; 
			case CIMIDSLPackage.OTHER_DETAILS:
				sequence_OtherDetails(context, (OtherDetails) semanticObject); 
				return; 
			case CIMIDSLPackage.TERM_BINDING:
				sequence_TermBinding(context, (TermBinding) semanticObject); 
				return; 
			case CIMIDSLPackage.TERM_BINDINGS:
				sequence_TermBindings(context, (TermBindings) semanticObject); 
				return; 
			case CIMIDSLPackage.TERM_DEFINITION:
				sequence_TermDefinition(context, (TermDefinition) semanticObject); 
				return; 
			case CIMIDSLPackage.TERM_DEFINITIONS:
				sequence_TermDefinitions(context, (TermDefinitions) semanticObject); 
				return; 
			case CIMIDSLPackage.TERMINOLOGY:
				sequence_Terminology(context, (Terminology) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArchetypeModel returns ArchetypeModel
	 *
	 * Constraint:
	 *     elements+=Archetype+
	 */
	protected void sequence_ArchetypeModel(ISerializationContext context, ArchetypeModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Archetype returns Archetype
	 *
	 * Constraint:
	 *     (
	 *         adl_version=MYSTRING 
	 *         rm_release=MYSTRING 
	 *         name=MYSTRING 
	 *         language=Languge 
	 *         description=Description 
	 *         definition=Matches 
	 *         terminology=Terminology
	 *     )
	 */
	protected void sequence_Archetype(ISerializationContext context, Archetype semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__ADL_VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__ADL_VERSION));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__RM_RELEASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__RM_RELEASE));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__LANGUAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__LANGUAGE));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__DEFINITION));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__TERMINOLOGY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ARCHETYPE__TERMINOLOGY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArchetypeAccess().getAdl_versionMYSTRINGTerminalRuleCall_3_0(), semanticObject.getAdl_version());
		feeder.accept(grammarAccess.getArchetypeAccess().getRm_releaseMYSTRINGTerminalRuleCall_6_0(), semanticObject.getRm_release());
		feeder.accept(grammarAccess.getArchetypeAccess().getNameMYSTRINGTerminalRuleCall_10_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getArchetypeAccess().getLanguageLangugeParserRuleCall_14_0(), semanticObject.getLanguage());
		feeder.accept(grammarAccess.getArchetypeAccess().getDescriptionDescriptionParserRuleCall_18_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getArchetypeAccess().getDefinitionMatchesParserRuleCall_22_0(), semanticObject.getDefinition());
		feeder.accept(grammarAccess.getArchetypeAccess().getTerminologyTerminologyParserRuleCall_26_0(), semanticObject.getTerminology());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     (originalAuthor=OriginalAuthor details=Details)
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.DESCRIPTION__ORIGINAL_AUTHOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.DESCRIPTION__ORIGINAL_AUTHOR));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.DESCRIPTION__DETAILS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.DESCRIPTION__DETAILS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getOriginalAuthorOriginalAuthorParserRuleCall_4_0(), semanticObject.getOriginalAuthor());
		feeder.accept(grammarAccess.getDescriptionAccess().getDetailsDetailsParserRuleCall_11_0(), semanticObject.getDetails());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Details returns Details
	 *
	 * Constraint:
	 *     (name=MYSTRING language=MYSTRING use=STRING copyright=STRING other_details=OtherDetails)
	 */
	protected void sequence_Details(ISerializationContext context, Details semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.DETAILS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.DETAILS__NAME));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.DETAILS__LANGUAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.DETAILS__LANGUAGE));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.DETAILS__USE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.DETAILS__USE));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.DETAILS__COPYRIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.DETAILS__COPYRIGHT));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.DETAILS__OTHER_DETAILS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.DETAILS__OTHER_DETAILS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDetailsAccess().getNameMYSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDetailsAccess().getLanguageMYSTRINGTerminalRuleCall_9_0(), semanticObject.getLanguage());
		feeder.accept(grammarAccess.getDetailsAccess().getUseSTRINGTerminalRuleCall_15_0(), semanticObject.getUse());
		feeder.accept(grammarAccess.getDetailsAccess().getCopyrightSTRINGTerminalRuleCall_21_0(), semanticObject.getCopyright());
		feeder.accept(grammarAccess.getDetailsAccess().getOther_detailsOtherDetailsParserRuleCall_27_0(), semanticObject.getOther_details());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Languge returns Languge
	 *
	 * Constraint:
	 *     name=MYSTRING
	 */
	protected void sequence_Languge(ISerializationContext context, Languge semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.LANGUGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.LANGUGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLangugeAccess().getNameMYSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Matches returns Matches
	 *
	 * Constraint:
	 *     (name=MYSTRING definition=MYSTRING? (submatch+=Matches+ | (value=MYSTRING? valueDefinition=MYSTRING))?)
	 */
	protected void sequence_Matches(ISerializationContext context, Matches semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OriginalAuthor returns OriginalAuthor
	 *
	 * Constraint:
	 *     (date=STRING organization=STRING name=STRING email=STRING)
	 */
	protected void sequence_OriginalAuthor(ISerializationContext context, OriginalAuthor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ORIGINAL_AUTHOR__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ORIGINAL_AUTHOR__DATE));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ORIGINAL_AUTHOR__ORGANIZATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ORIGINAL_AUTHOR__ORGANIZATION));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ORIGINAL_AUTHOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ORIGINAL_AUTHOR__NAME));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.ORIGINAL_AUTHOR__EMAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.ORIGINAL_AUTHOR__EMAIL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOriginalAuthorAccess().getDateSTRINGTerminalRuleCall_3_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getOriginalAuthorAccess().getOrganizationSTRINGTerminalRuleCall_9_0(), semanticObject.getOrganization());
		feeder.accept(grammarAccess.getOriginalAuthorAccess().getNameSTRINGTerminalRuleCall_15_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getOriginalAuthorAccess().getEmailSTRINGTerminalRuleCall_21_0(), semanticObject.getEmail());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OtherDetails returns OtherDetails
	 *
	 * Constraint:
	 *     (
	 *         lifecycle_state=STRING 
	 *         custodian_namespace=STRING 
	 *         custodian_organization=STRING 
	 *         license=STRING 
	 *         ip_acknowledgement_loinc=STRING 
	 *         ip_acknowledgement_snomed=STRING
	 *     )
	 */
	protected void sequence_OtherDetails(ISerializationContext context, OtherDetails semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__LIFECYCLE_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__LIFECYCLE_STATE));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__CUSTODIAN_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__CUSTODIAN_NAMESPACE));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__CUSTODIAN_ORGANIZATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__CUSTODIAN_ORGANIZATION));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__LICENSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__LICENSE));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__IP_ACKNOWLEDGEMENT_LOINC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__IP_ACKNOWLEDGEMENT_LOINC));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__IP_ACKNOWLEDGEMENT_SNOMED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.OTHER_DETAILS__IP_ACKNOWLEDGEMENT_SNOMED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOtherDetailsAccess().getLifecycle_stateSTRINGTerminalRuleCall_3_0(), semanticObject.getLifecycle_state());
		feeder.accept(grammarAccess.getOtherDetailsAccess().getCustodian_namespaceSTRINGTerminalRuleCall_9_0(), semanticObject.getCustodian_namespace());
		feeder.accept(grammarAccess.getOtherDetailsAccess().getCustodian_organizationSTRINGTerminalRuleCall_15_0(), semanticObject.getCustodian_organization());
		feeder.accept(grammarAccess.getOtherDetailsAccess().getLicenseSTRINGTerminalRuleCall_21_0(), semanticObject.getLicense());
		feeder.accept(grammarAccess.getOtherDetailsAccess().getIp_acknowledgement_loincSTRINGTerminalRuleCall_27_0(), semanticObject.getIp_acknowledgement_loinc());
		feeder.accept(grammarAccess.getOtherDetailsAccess().getIp_acknowledgement_snomedSTRINGTerminalRuleCall_33_0(), semanticObject.getIp_acknowledgement_snomed());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TermBinding returns TermBinding
	 *
	 * Constraint:
	 *     (name=STRING binding=MYSTRING)
	 */
	protected void sequence_TermBinding(ISerializationContext context, TermBinding semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.TERM_BINDING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.TERM_BINDING__NAME));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.TERM_BINDING__BINDING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.TERM_BINDING__BINDING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTermBindingAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTermBindingAccess().getBindingMYSTRINGTerminalRuleCall_5_0(), semanticObject.getBinding());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TermBindings returns TermBindings
	 *
	 * Constraint:
	 *     (name=STRING elements+=TermBinding*)
	 */
	protected void sequence_TermBindings(ISerializationContext context, TermBindings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TermDefinition returns TermDefinition
	 *
	 * Constraint:
	 *     (name=STRING text=MYSTRING description=MYSTRING)
	 */
	protected void sequence_TermDefinition(ISerializationContext context, TermDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.TERM_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.TERM_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.TERM_DEFINITION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.TERM_DEFINITION__TEXT));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.TERM_DEFINITION__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.TERM_DEFINITION__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTermDefinitionAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTermDefinitionAccess().getTextMYSTRINGTerminalRuleCall_9_0(), semanticObject.getText());
		feeder.accept(grammarAccess.getTermDefinitionAccess().getDescriptionMYSTRINGTerminalRuleCall_15_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TermDefinitions returns TermDefinitions
	 *
	 * Constraint:
	 *     (name=STRING elements+=TermDefinition*)
	 */
	protected void sequence_TermDefinitions(ISerializationContext context, TermDefinitions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Terminology returns Terminology
	 *
	 * Constraint:
	 *     (termDefinition=TermDefinitions termBinding=TermBindings)
	 */
	protected void sequence_Terminology(ISerializationContext context, Terminology semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.TERMINOLOGY__TERM_DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.TERMINOLOGY__TERM_DEFINITION));
			if (transientValues.isValueTransient(semanticObject, CIMIDSLPackage.Literals.TERMINOLOGY__TERM_BINDING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CIMIDSLPackage.Literals.TERMINOLOGY__TERM_BINDING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTerminologyAccess().getTermDefinitionTermDefinitionsParserRuleCall_4_0(), semanticObject.getTermDefinition());
		feeder.accept(grammarAccess.getTerminologyAccess().getTermBindingTermBindingsParserRuleCall_12_0(), semanticObject.getTermBinding());
		feeder.finish();
	}
	
	
}
