/**
 * generated by Xtext 2.10.0
 */
package gov.us.fhim.xtext.cimi.cIMIDSL.impl;

import gov.us.fhim.xtext.cimi.cIMIDSL.CIMIDSLPackage;
import gov.us.fhim.xtext.cimi.cIMIDSL.TermBindings;
import gov.us.fhim.xtext.cimi.cIMIDSL.TermDefinitions;
import gov.us.fhim.xtext.cimi.cIMIDSL.Terminology;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Terminology</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link gov.us.fhim.xtext.cimi.cIMIDSL.impl.TerminologyImpl#getTermDefinition <em>Term Definition</em>}</li>
 *   <li>{@link gov.us.fhim.xtext.cimi.cIMIDSL.impl.TerminologyImpl#getTermBinding <em>Term Binding</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TerminologyImpl extends MinimalEObjectImpl.Container implements Terminology
{
  /**
   * The cached value of the '{@link #getTermDefinition() <em>Term Definition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTermDefinition()
   * @generated
   * @ordered
   */
  protected TermDefinitions termDefinition;

  /**
   * The cached value of the '{@link #getTermBinding() <em>Term Binding</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTermBinding()
   * @generated
   * @ordered
   */
  protected TermBindings termBinding;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TerminologyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CIMIDSLPackage.Literals.TERMINOLOGY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermDefinitions getTermDefinition()
  {
    return termDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTermDefinition(TermDefinitions newTermDefinition, NotificationChain msgs)
  {
    TermDefinitions oldTermDefinition = termDefinition;
    termDefinition = newTermDefinition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION, oldTermDefinition, newTermDefinition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTermDefinition(TermDefinitions newTermDefinition)
  {
    if (newTermDefinition != termDefinition)
    {
      NotificationChain msgs = null;
      if (termDefinition != null)
        msgs = ((InternalEObject)termDefinition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION, null, msgs);
      if (newTermDefinition != null)
        msgs = ((InternalEObject)newTermDefinition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION, null, msgs);
      msgs = basicSetTermDefinition(newTermDefinition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION, newTermDefinition, newTermDefinition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TermBindings getTermBinding()
  {
    return termBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTermBinding(TermBindings newTermBinding, NotificationChain msgs)
  {
    TermBindings oldTermBinding = termBinding;
    termBinding = newTermBinding;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CIMIDSLPackage.TERMINOLOGY__TERM_BINDING, oldTermBinding, newTermBinding);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTermBinding(TermBindings newTermBinding)
  {
    if (newTermBinding != termBinding)
    {
      NotificationChain msgs = null;
      if (termBinding != null)
        msgs = ((InternalEObject)termBinding).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CIMIDSLPackage.TERMINOLOGY__TERM_BINDING, null, msgs);
      if (newTermBinding != null)
        msgs = ((InternalEObject)newTermBinding).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CIMIDSLPackage.TERMINOLOGY__TERM_BINDING, null, msgs);
      msgs = basicSetTermBinding(newTermBinding, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CIMIDSLPackage.TERMINOLOGY__TERM_BINDING, newTermBinding, newTermBinding));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION:
        return basicSetTermDefinition(null, msgs);
      case CIMIDSLPackage.TERMINOLOGY__TERM_BINDING:
        return basicSetTermBinding(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION:
        return getTermDefinition();
      case CIMIDSLPackage.TERMINOLOGY__TERM_BINDING:
        return getTermBinding();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION:
        setTermDefinition((TermDefinitions)newValue);
        return;
      case CIMIDSLPackage.TERMINOLOGY__TERM_BINDING:
        setTermBinding((TermBindings)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION:
        setTermDefinition((TermDefinitions)null);
        return;
      case CIMIDSLPackage.TERMINOLOGY__TERM_BINDING:
        setTermBinding((TermBindings)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CIMIDSLPackage.TERMINOLOGY__TERM_DEFINITION:
        return termDefinition != null;
      case CIMIDSLPackage.TERMINOLOGY__TERM_BINDING:
        return termBinding != null;
    }
    return super.eIsSet(featureID);
  }

} //TerminologyImpl
