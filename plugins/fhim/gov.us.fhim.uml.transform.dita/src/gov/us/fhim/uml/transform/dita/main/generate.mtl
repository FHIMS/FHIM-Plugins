[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.eclipse.org/uml2/3.0.0/UML', 'http://www.openhealthtools.org/mdht/schemas/term/1','http://www.eclipse.org/emf/2002/Ecore','http://www.openhealthtools.org/mdht/schemas/term/1','http://www.ibm.com/xtools/1.5.3/Umlnotation')]



[template public generateElement(aPackage : Package)]
[comment @main/]

[generateForPackage(aPackage)/]

[for (subPackage : Package | aPackage.nestedPackage)]
	[generateForPackage(subPackage)/]
[/for]


[/template]

[template public generateForPackage(aPackage : Package)]

	[generatePackageTopicTemplate(aPackage)/]
[generatePackageTopicGenerated(aPackage)/]
	[for (aClass : Class | aPackage.eContents(Class)->select(visibility = uml::VisibilityKind::public))]
		[generateClassTopicTemplate(aClass)/]
		[generateClassTopicGenerated(aClass)/]
	[/for]


	[for (aClass : Class | aPackage.eContents(Class)->select(visibility = uml::VisibilityKind::public)->sortedBy(name))]
		[for (property : Property | aClass.ownedAttribute->select(association = null))]
			[for (vsc: ValueSetConstraint| property.getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)).oclAsType(ValueSetConstraint))]
				[let vsv  : ValueSetVersion = vsc.reference]
					[let ee : Enumeration = vsv.base_Enumeration.oclAsType(Enumeration)]
						[generateClassTopicTemplate(ee)/]
						[generateEnumerationTopicGenerated(ee)/]			
					[/let]
				[/let]
			[/for]
		[/for]
	[/for]

	[for (aClass : Class | aPackage.eContents(Class)->select(visibility = uml::VisibilityKind::public)->sortedBy(name))]
		[for (property : Property | aClass.ownedAttribute->select(association = null))]
			[for (csc: CodeSystemConstraint| property.getStereotypeApplications()->select(oclIsTypeOf(CodeSystemConstraint)).oclAsType(CodeSystemConstraint))]
				[let csv  : CodeSystemVersion = csc.reference]
					[let ee : Enumeration = csv.base_Enumeration.oclAsType(Enumeration)]
						[generateClassTopicTemplate(ee)/]
						[generateCodeSystemTopic(ee,csv)/]			
					[/let]
				[/let]
			[/for]
		[/for]
	[/for]


[generateContentBookMap(aPackage)/]

[generateMaps(aPackage)/]

[generateReviewSheet(aPackage)/]

[/template]



[template public generateContentBookMap(aPackage : Package)]


[file ('contents/'+aPackage.name.toLower()+'classes.ditamap', false, 'UTF-8')]
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE bookmap PUBLIC "-//OASIS//DTD DITA BookMap//EN" "bookmap.dtd">
<bookmap id="[aPackage.name/]">

	<chapter href="[aPackage.name/]Classes.dita" navtitle="[aPackage.name/]Classes" type="topic">
		<!-- document.ditamap is generated from the model -->
		<topicref format="ditamap" href="../maps/[aPackage.name.toLower()/]classes.ditamap" navtitle="[aPackage.name/]"/>
	</chapter>

</bookmap>


	
[/file]



[file ('contents/'+aPackage.name+'Classes.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
 "topic.dtd">
<topic id="topicId" xml:lang="en-us">
	<title>[aPackage.name/] Domain</title>
	<body>	
	[if (not aPackage.ownedComment->isEmpty())]
		[for (aComment : Comment | aPackage.ownedComment->select(c | not c.getStereotypeApplications()->isEmpty() ) )]
			<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>
		[/for]
[/if]
[if (not aPackage.eAnnotations->select(source='uml2.diagrams')->isEmpty())]
	[for (ea  : EAnnotation | aPackage.eAnnotations->select(source='uml2.diagrams'))]	
		[for (eo : EObject | ea.contents)]
			[if (eo.oclIsTypeOf(UMLDiagram))]
				[let diagram : UMLDiagram = eo.oclAsType(UMLDiagram)]
[generateDiagramTopicTemplate(diagram)/]
[generateDiagramTopicGenerated(diagram)/]
				[/let]
			[/if]		
		[/for]		
	[/for]
[else]

[/if]
 
	</body>
</topic>
[/file]


[file ('contents/enumerations.ditamap', false, 'UTF-8')]
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE bookmap PUBLIC "-//OASIS//DTD DITA BookMap//EN" "bookmap.dtd">
<bookmap id="[aPackage.name/]">

	<chapter href="Enumerations.dita" navtitle="Enumerations" type="topic">
		<!-- document.ditamap is generated from the model -->
		<topicref format="ditamap" href="../maps/enumerations.ditamap" navtitle="Enumerations"/>
	</chapter>

</bookmap>
	
[/file]

[file ('contents/Enumerations.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
 "topic.dtd">
<topic id="topicId" xml:lang="en-us">
	<title>ENUMERATIONS</title>
	<body>
		<p>Enumerations</p>
	</body>
</topic>
[/file]
[/template]


[template public generateMaps(aPackage : Package)]
[file ('maps/'+aPackage.name.toLower()+'classes.ditamap', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE map PUBLIC "-//OASIS//DTD DITA Map//EN" "map.dtd">
<map title="Classes">



[if (not aPackage.eAnnotations->select(source='uml2.diagrams')->isEmpty())]
<topichead navtitle="Diagrams">
	[for (ea  : EAnnotation | aPackage.eAnnotations->select(source='uml2.diagrams'))]	
		[for (eo : EObject | ea.contents)]
			[if (eo.oclIsTypeOf(UMLDiagram))]
				[let diagram : UMLDiagram = eo.oclAsType(UMLDiagram)]
<topicref href="../topics/t_[diagram.name.replaceAll('\\W+','').replaceAll(':+','')/]Diagram.dita" type="topic" />
				[/let]
			[/if]		
		[/for]		
	[/for]
</topichead>
[/if]



[if (not aPackage.eAnnotations->select(source='uml2.diagrams')->isEmpty())]
	[for (ea  : EAnnotation | aPackage.eAnnotations->select(source='uml2.diagrams'))]	
		[for (eo : EObject | ea.contents)]
			[if (eo.oclIsTypeOf(UMLDiagram))]
				[let diagram : UMLDiagram = eo.oclAsType(UMLDiagram)]

				[/let]
			[/if]		
		[/for]		
	[/for]
[/if]





[if (not aPackage.eContents(Class)->isEmpty())]
<topichead navtitle="Definitions">
	[for (aClass : Class | aPackage.eContents(Class)->select(visibility = uml::VisibilityKind::public)->sortedBy(name))]
<topicref href="../topics/t_[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita" type="topic" /> 
	[/for]
</topichead>
[/if]

[if (not aPackage.eContents(Class).ownedAttribute->select(association = null).getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint))->isEmpty())]
<topichead navtitle="Terminology">	

<topichead navtitle="Value Sets">
	[for (eee : Enumeration |  aPackage.eContents(Class).ownedAttribute->select(association = null).getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)).oclAsType(ValueSetConstraint).reference.base_Enumeration.oclAsType(Enumeration)->sortedBy(name)->asOrderedSet())]
		[let ee : Enumeration = eee.oclAsType(Enumeration)]
<topicref href="../topics/t_[ee.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita" type="topic" />
		[/let]
	[/for]
</topichead>

[if (not aPackage.eContents(Class).ownedAttribute->select(association = null).getStereotypeApplications()->select(oclIsTypeOf(CodeSystemConstraint))->isEmpty())]
<topichead navtitle="Code Systems">
	[for (eee : Enumeration |  aPackage.eContents(Class).ownedAttribute->select(association = null).getStereotypeApplications()->select(oclIsTypeOf(CodeSystemConstraint)).oclAsType(CodeSystemConstraint).reference.base_Enumeration.oclAsType(Enumeration)->sortedBy(name)->asOrderedSet())]
		[let ee : Enumeration = eee.oclAsType(Enumeration)]
<topicref href="../topics/t_[ee.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita" type="topic" />
		[/let]
	[/for]
</topichead>
[/if]

</topichead>	
[/if]

</map>
[/file]
[file ('maps/enumerations.ditamap', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE map PUBLIC "-//OASIS//DTD DITA Map//EN" "map.dtd">
<map title="Classes">
	[for (enumeration : Enumeration | aPackage.eContents(Enumeration)->sortedBy(name))]
<topicref href="../topics/t_[enumeration.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita" type="topic" />
	[/for]
</map>
[/file]


[/template]



[template public generateReviewSheet(aPackage : Package)]
[file ('review/'+aPackage.name+'.html', false, 'UTF-8')]

<html xmlns:Standard="http://www.eclipse.org/uml2/schemas/Standard/1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:fhim="http:///schemas/fhim/_bbjuwA3cEeSGTazHdUQojA/5" xmlns:notation="http://www.eclipse.org/gmf/runtime/1.0.2/notation" xmlns:term="http://www.openhealthtools.org/mdht/schemas/term/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xmlns:xmi="http://www.omg.org/XMI" xmlns:umlnotation="http://www.ibm.com/xtools/1.5.3/Umlnotation" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:CDA="http://www.openhealthtools.org/mdht/schemas/cda/4" xmlns:Default_1="http:///schemas/Default/1" xmlns:RIM="http:///schemas/RIM/_fvnwgAH4Ed6VH-9W1IVKXA/4" xmlns:SketchNotation="http://www.ibm.com/ccl/soa/sketch/notation/1.0.0/">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <title>[aPackage.name /] Domain</title>
   </head>
   <body style="font-family:Courier;font-size:14px">
      <h1>[aPackage.name /] Domain</h1>
      <p> The purpose of this review is to identify the data elements required for the
         interoperable exchange for the [aPackage.name /] domain including dependencies. A column is
         provided at the far right of the table for you to enter comments related to each
         data element. If the class or domain is missing data elements, please add a row
         at the bottom of the sheet and specify a name, description, and type of data
         (e.g. numeric, string, date/time, code). 
      </p>
      <p> Once you have reviewed the data elements, please review the value sets
         associated with the coded data elements. Please provide feedback by adding
         comments in the column provided at the right of item/row or by adding rows at
         the bottom table. For any new coded concepts without a valid code yet, our team
         will propose them for addition in the source coding system. 
      </p>
      <ul>
         <li><a href=""> <i><b>[aPackage.name /]</b> </i> Domain </a></li>
       </ul>
      <table bordercolor="#DCDCDC" border="1" cellspacing="0" cellpadding="7" style="font-family:Courier">
         <tr bgcolor="#98FB98" style="font-size:18px" align="left">
            <td colspan="1"><b><a id=""> '[aPackage.name /]' Domain
                     </a></b></td>
            <td colspan="4" style="font-size:12px">Note that the Information Source hierarchy is in the Common domain, and is not shown here.</td>
            <td colspan="1" style="color:gray;font-size:10px">Enter your suggestions
               regarding this element
            </td>
         </tr>
      </table>
      <table bordercolor="#DCDCDC" border="1" cellspacing="0" cellpadding="7" style="font-family:Courier">
         <tr>
            <th width="20%">Element Name</th>
            <th width="20%">Element Description</th>
            <th width="15%">Format/Type</th>
            <th width="15%">Value Set Name</th>
            <th width="15%">Optionality/<br>Repetition
            </th>
            <th width="15%">Reviewer's Comments</th>
         </tr>
 


[if (not aPackage.eContents(Class)->isEmpty())]
	[for (aClass : Class | aPackage.eContents(Class)->select(visibility = uml::VisibilityKind::public)->sortedBy(name))]
 
        <tr bgcolor="#87CEFA" style="font-size:16px">
            <td colspan="1"><a id="_420A62FD03B6418BB10D01EB"><b>[aClass.name/]</b></a> Class 
            </td>
            <td colspan="1" style="font-size:12px" valign="top"> [for (aComment : Comment | aClass.ownedComment)]<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>[/for]</td>
            <td style="font-size:14px" align="left" valign="top">NA</td>
            <td> </td>
            <td>NA</td>
            <td colspan="1" style="color:gray;font-size:10px">Enter your suggestions
               regarding this element
            </td>
         </tr>


	[for (property : Property | aClass.ownedAttribute->select(association = null))]

       <tr bgcolor="#AFEEEE" style="font-size:12px" align="left">
            <td>
               <div id="_JR8mUMIxEeGx0M-CyAbegA">[aClass.name/].<b>[property.name/]</b></div>
            </td>
            <td>[for (aComment : Comment | property.ownedComment)]<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>[/for]</td>
            <td valign="top"> [property.type.name/] </td>
            <td>[for (vsc: ValueSetConstraint| property.getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)).oclAsType(ValueSetConstraint))]
				[let vsv  : ValueSetVersion = vsc.reference]

					<a href="#[vsv.fullName/]">[vsv.fullName/]</a> 
					
					 
				[/let]
			[/for]</td>
            <td>([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</td>
            <td colspan="1" style="color:gray;font-size:10px">Enter your suggestions regarding this
               element...
            </td>
         </tr>


	[/for]

	[for (property : Property | aClass.ownedAttribute->select(association <> null))]


 	 <tr bgcolor="#AFEEEE" style="font-size:12px" align="left">
            <td>
               <div id="_JR8mUMIxEeGx0M-CyAbegA">[aClass.name/].<b>[property.name/]</b></div>
            </td>
            <td>[for (aComment : Comment | property.ownedComment)]<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>[/for]</td>
            <td valign="top"> <b>[property.type.name/]</b> </td>
            <td>NA</td>
            <td>([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</td>
            <td colspan="1" style="color:gray;font-size:10px">Enter your suggestions regarding this
               element...
            </td>
         </tr>


	[/for]

	[/for]
[/if]

  </table>
      <table bordercolor="#DCDCDC" border="1" cellspacing="0" cellpadding="7" style="font">
         <tr>
            <th>Value Set Constraint</th>
            <th>Element Description</th>
         </tr>
       


	[for (aClass : Class | aPackage.eContents(Class)->select(visibility = uml::VisibilityKind::public)->sortedBy(name))]
		[for (property : Property | aClass.ownedAttribute->select(association = null))]
			[for (vsc: ValueSetConstraint| property.getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)).oclAsType(ValueSetConstraint))]
				[let vsv  : ValueSetVersion = vsc.reference]
					[let ee : Enumeration = vsv.base_Enumeration.oclAsType(Enumeration)]
  			<tr>
            <td bgcolor="#F2C3AC" style="font-weight:bold;color:gray;font-size:14px" align="left" width="200px">
               <div style="color:black" id="__IkXgOQ1EeSuxrYeYCfuhA"><a ID="[vsv.fullName/]">[vsv.fullName/]</a><br>
                  
               </div>
            </td>
            <td bgcolor="#D4C7C1" style="font-size:12px" align="left" width="400px">  [vsv.fullName/]   <br/> [for (aComment : Comment | property.ownedComment)]<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>[/for]<br> [vsv.url/]
            </td>
         </tr>

       <tr>
            <td>Enter comments:</td>
            <td>...</td>
         </tr>

[for (ol : EnumerationLiteral |   ee.ownedLiteral )]
  		<tr>
            <tr bgcolor="#F2F5A9" style="font-size:12px" align="left">
               <td> Coded concept <b>[ol.name/]</b></td>
               <td colspan="1" style="color:gray;font=size:10px">Enter your suggestions regarding this
                  code...
               </td>
        </tr>
[/for]
 


       
		
					[/let]
				[/let]
			[/for]
		[/for]
	[/for]

	[for (aClass : Class | aPackage.eContents(Class)->select(visibility = uml::VisibilityKind::public)->sortedBy(name))]
		[for (property : Property | aClass.ownedAttribute->select(association = null))]
			[for (csc: CodeSystemConstraint| property.getStereotypeApplications()->select(oclIsTypeOf(CodeSystemConstraint)).oclAsType(CodeSystemConstraint))]
				[let csv  : CodeSystemVersion = csc.reference]
					[let ee : Enumeration = csv.base_Enumeration.oclAsType(Enumeration)]
						<tr>
            <td bgcolor="#F2C3AC" style="font-weight:bold;color:gray;font-size:14px" align="left" width="200px">
               <div style="color:black" id="__IkXgOQ1EeSuxrYeYCfuhA">[ee.name/]<br>
                  
               </div>
            </td>
            <td bgcolor="#D4C7C1" style="font-size:12px" align="left" width="400px"><b>[ee.name/] Value Set: </b>[for (aComment : Comment | property.ownedComment)]<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>[/for]<br> [csv.url/]
            </td>
         </tr>	
					[/let]
				[/let]
			[/for]
		[/for]
	[/for]

</table>

 [/file]


[/template]



[template public generatePackageTopicTemplate(aPackage : Package)]
[file ('topics/t_'+aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')+'Package.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="t_[aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]" xml:lang="en-us">
	<title conref="generated/_[aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]Package.dita#[aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]/title" />
	<shortdesc conref="generated/_[aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]Package.dita#[aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]/shortdesc" />
	<body conref="generated/_[aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]Package.dita#[aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]/body" />
</topic>
[/file]
[/template]

[template public generatePackageTopicGenerated(aPackage : Package)]
[file ('topics/generated/_'+aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')+'Package.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[aPackage.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]" xml:lang="en-us">
<title id="title">[generateClassTitle(aPackage)/]</title>
<shortdesc id="shortdesc">[generateClassShortDescription(aPackage)/]</shortdesc>
<body id="body" >[generatePackageBody(aPackage)/]</body>
</topic>
[/file]
[/template]

[template public generateDiagramTopicTemplate(aDiagram : UMLDiagram)]


[file ('topics/t_'+aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')+'Diagram.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="t_[aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')/]" xml:lang="en-us">
	<title conref="generated/_[aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')/]Diagram.dita#[aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')/]/title" />
	<shortdesc conref="generated/_[aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')/]Diagram.dita#[aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')/]/shortdesc" />
	<body conref="generated/_[aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')/]Diagram.dita#[aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')/]/body" />
</topic>
[/file]
[/template]

[template public generateDiagramTopicGenerated(aDiagram : UMLDiagram)]
[file ('topics/generated/_'+aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')+'Diagram.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[aDiagram.name.replaceAll('\\W+','').replaceAll(':+','')/]" xml:lang="en-us">
<title id="title">[aDiagram.name/]</title>
<shortdesc id="shortdesc">[aDiagram.type/] Diagram</shortdesc>
<body id="body" >
<p>[   escapeXml(aDiagram.description).replaceAll('\\n', '</p><p>') /]</p>
<p><image href="../../diagrams/[diagram.type/]/[diagram.name.replaceAll('\\W+','').replaceAll(':+','')/].jpg" height="10in" width="7in" /></p>
</body>
</topic>
[/file]
[/template]




[template public generateClassTopicTemplate(aClass : Classifier)]
[file ('topics/t_'+aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')+'.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="t_[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]" xml:lang="en-us">
	<title conref="generated/_[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita#[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]/title" />
	<shortdesc conref="generated/_[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita#[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]/shortdesc" />
	<body conref="generated/_[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita#[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]/body" />
</topic>
[/file]
[/template]

[template public generateClassTopicGenerated(aClass : Class)]
[file ('topics/generated/_'+aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')+'.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[aClass.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]" xml:lang="en-us">
<title id="title">[generateClassTitle(aClass)/]</title>
<shortdesc id="shortdesc">[generateClassShortDescription(aClass)/]</shortdesc>
<body id="body" >[generateClassBody(aClass)/]</body>
</topic>
[/file]
[/template]

[template public generateEnumerationTopicGenerated(enumeration : Enumeration)]
[file ('topics/generated/_'+enumeration.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')+'.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[enumeration.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]" xml:lang="en-us">
<title id="title">[generateClassTitle(enumeration)/]</title>
<shortdesc id="shortdesc">
[generateClassShortDescription(enumeration)/]
<tt>The use of any code system referenced in the FHIM model is governed by the license requirements of the specific code system noted. Please refer to the code system authority for use restrictions.</tt>
</shortdesc>
<body id="body" >[generateEnumerationBody(enumeration)/]</body>
</topic>
[/file]
[/template]

[template public generateCodeSystemTopic(enumeration : Enumeration, csv : CodeSystemVersion)]
[file ('topics/generated/_'+enumeration.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')+'.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[enumeration.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/]" xml:lang="en-us">
<title id="title">[generateClassTitle(enumeration)/]</title>
<shortdesc id="shortdesc">[generateClassShortDescription(enumeration)/]</shortdesc>
<body id="body" >

<section id="definition">
<table><tgroup cols="2"> <colspec colname="col1" colwidth="1*"/> <colspec colname="col2" colwidth="4*"/> <tbody>
<row><entry>Code System</entry><entry>[enumeration.name/] [csv.identifier /] </entry></row>
<row><entry>Full Name </entry><entry>[csv.fullName /] </entry></row>
<row><entry>URL  </entry><entry>[csv.url /] </entry></row>
</tbody></tgroup></table>
</section>


</body>
</topic>
[/file]
[/template]


[template public generateClassTitle(ne  : NamedElement)]
[ne.name/]
[/template]

[template public generateClassTitleAlts(aClass  : Class)]
[aClass.name/]([aClass.qualifiedName/])
[/template]

[template public generateClassShortDescription(aClass  : NamedElement)]

[/template]

[template public generateClassProlog(aClass  : Class)]
[aClass.name/]([aClass.qualifiedName/])
[/template]

[template public generateClassBody(aClass  : Class)]


[generateClassGeneralizations(aClass) /]

[generateClassSpecializations(aClass)/]

[generateClassFullDescription(aClass) /]


[/template]


[template public generatePackageBody(aPackage  : Package)]



[generatePackageFullDescription(aPackage) /]





[/template]


[template public generateEnumerationBody(enumeration  : Enumeration)]

[getEnumerationDefinition(enumeration)/]

[/template]

[template public generateClassGeneralizations(aClass  : Class)]
[if (not aClass.parents()->select(visibility = uml::VisibilityKind::public)->isEmpty())]
<section id="generalizations"  audience="developer, modeler">
  <title>Hierarchy</title>
	[for (classifier : Classifier | aClass.parents()->select(visibility = uml::VisibilityKind::public))]
	[aClass.name/] is a kind of <xref href="../t_[classifier.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita">[classifier.name/]</xref>	
	[/for]
</section>
[/if]
[/template]

[template public generateClassSpecializations(aClass  : Class)]

[if (not aClass.getTargetDirectedRelationships()->select(oclIsTypeOf(Generalization)).oclAsType(Generalization)->select(g : Generalization |  g.specific.visibility = uml::VisibilityKind::public and  g.specific.getNearestPackage().qualifiedName.equalsIgnoreCase(aClass.getNearestPackage().qualifiedName) )->isEmpty())]
<section id="specializations"  audience="developer, modeler">
	<title>Derivations</title>
	<ul>
[for (generalization : Generalization | aClass.getTargetDirectedRelationships()->select(oclIsTypeOf(Generalization)).oclAsType(Generalization)->select(g : Generalization |  g.specific.visibility = uml::VisibilityKind::public and  g.specific.getNearestPackage().qualifiedName.equalsIgnoreCase(aClass.getNearestPackage().qualifiedName) )  )]
<li><xref href="../t_[generalization.specific.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita">[generalization.specific.name/] </xref> is a kind of  [aClass.name/] </li>
[/for]
	</ul>
</section>
[/if]
[/template]

[template public generateClassFullDescription(aClass  : Class)]
[if (not aClass.ownedComment->isEmpty())]
<section id="description" audience="developer, modeler, sme">
  <title>Description</title>
[for (aComment : Comment | aClass.ownedComment)]
	<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>

[/for]

[if (not aClass.ownedAttribute->isEmpty())]
	
<simpletable>
 <sthead>
  <stentry>Content</stentry>
  <stentry>Description</stentry>
 </sthead>
[for (property : Property | aClass.ownedAttribute->select(association = null)->sortedBy(name))]
 <strow>

  <stentry><p>[property.name/] :  [if (property.type.owner.oclIsKindOf(NamedElement) and not property.type.owner.oclAsType(NamedElement).name.equalsIgnoreCase('UMLPrimitiveTypes') )]<xref href="../t_[property.type.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita" >[property.type.name/]</xref>[else][property.type.name/][/if] ([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</p> 
		[for (vsc: ValueSetConstraint| property.getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)).oclAsType(ValueSetConstraint))]
				[let vsv  : ValueSetVersion = vsc.reference]
					[let ee : Enumeration = vsv.base_Enumeration.oclAsType(Enumeration)]
<p>See <xref href="../t_[ee.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita">[ee.name/]</xref> definition for values.</p>
					[/let]
				[/let]
			[/for]

		[for (csc: CodeSystemConstraint | property.getStereotypeApplications()->select(oclIsTypeOf(CodeSystemConstraint)).oclAsType(CodeSystemConstraint))]
				[let csv  : CodeSystemVersion = csc.reference]
					[let ee : Enumeration = csv.base_Enumeration.oclAsType(Enumeration)]
<p>See <xref href="../t_[ee.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita">[ee.name/]</xref> definition for code system information.</p>
					[/let]
				[/let]
			[/for]

</stentry>
  <stentry><p>[for (aComment : Comment | property.ownedComment)]
				[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]
			[/for]
			</p>
  </stentry>
  </strow>
[/for]

[for (property : Property | aClass.ownedAttribute->select(association <> null)->sortedBy(name))]
 <strow>
  <stentry><p>[property.name/] : <xref href="../t_[property.type.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')/].dita" >[property.type.name/]</xref> ([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</p></stentry>
  <stentry><p>[for (aComment : Comment | property.ownedComment)]
				[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]
			[/for]
			</p>
  </stentry>
  </strow>
[/for]

</simpletable>
[/if]

</section>
[/if]



[/template]



[template public generatePackageFullDescription(aPackage  : Package)]
[if (not aPackage.ownedComment->isEmpty())]
<section id="description" audience="developer, modeler, sme">
  <title>Description</title>
[for (aComment : Comment | aPackage.ownedComment)]
	<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>

[/for]
</section>
[/if]



[/template]

[template public generateAttributes(aClass  : Class)]
[if (not aClass.ownedAttribute->select(association = null)->isEmpty() )]
<section id="attributes">
  <title>Attributes</title>
<ol>
[for (property : Property | aClass.ownedAttribute->select(association = null))]
	<li>[property.name/] : [property.type.name/] ([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</li>
[/for]
</ol>
</section>
[/if]


[/template]

[template public generateAssociations(aClass  : Class)]
[if (not aClass.ownedAttribute->select(association <> null)->isEmpty() )]
<section id="associations">
  <title>Associations</title>
<ol>
[for (property : Property | aClass.ownedAttribute->select(association <> null))]
	<li>[property.name/] : [property.type.name/] ([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</li>
[/for]
</ol>
</section>
[/if]
[/template]

[template public generateConstraints(aClass  : Class)]
[if (not aClass.ownedRule->isEmpty())]
<section id="constraints">
	<title>Constraints</title>
	<ul>


[if (not aClass.ownedAttribute->select(association = null)->isEmpty() )]
[for (property : Property | aClass.ownedAttribute->select(association = null))]
[for (valueSetConstraint : ValueSetConstraint | property.getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)))]
<li>[property.name /] <xref href="../t_[valueSetConstraint.reference.base_Enumeration.qualifiedName.replaceAll('\\W+','').replaceAll(':+','')  /].dita">[valueSetConstraint.reference.base_Enumeration.name /] </xref> [valueSetConstraint.reference.identifier  /]</li>
[/for]
[/for]
[/if]




	</ul>




</section>
[/if]


[/template]

[template public generateAdditionalOperations(aClass  : Class)]
<section id="additionalOperations">
  <title>Additional Operations</title>
</section>
[/template]

[template public generateSemantics(aClass  : Class)]
<section id="semantics">
  <title>Semantics</title>
</section>
[/template]

[template public generateNotation(aClass  : Class)]
<section id="notation">
  <title>Notation</title>
</section>
[/template]

[template public generatePresentationOptions(aClass  : Class)]
<section id="presentationOptions">
  <title>Presentation Options</title>
</section>
[/template]

[template public generateExamples(aClass  : Class)]
<section id="examples">
  <title>Examples</title>
</section>
[/template]

[query public getEnumerationDefinition(enumeration : Enumeration) : String = invoke('org.openhealthtools.mdht.uml.cda.dita.TransformValueSet', 'getDefinition(org.eclipse.uml2.uml.Enumeration)', Sequence{enumeration})/]

[query public escapeXml(input : String) : String = invoke('org.apache.commons.lang.StringEscapeUtils', 'escapeXml(java.lang.String)', Sequence{input})/]

