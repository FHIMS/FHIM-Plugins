modeltype uml uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype ecore "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype term uses 'http://www.openhealthtools.org/mdht/schemas/term/1';

transformation fhim2cda(in fhimModel : uml,in cdaBaseModel : uml, out cdaModel : uml );

main() {
	
	log('Transforming Federal Health Information Model (PIM) to HL7 Clinical Document Architecture (PSM)');

	// Create CDA PSM
	fhimModel.rootObjects()[uml::Package]-> map toCDA();
	
}

mapping uml::Package::toCDA() : uml::Package
{

	
	
	init{
		log('Transforming Package : ' + self.name);

		result := self.deepclone().oclAsType(uml::Package);

		result.ownedType.destroy();
	}



 	var clinicalDocument : uml::Class :=  result.createOwnedClass('ClinicalDocument',false);
 
 	clinicalDocument.general  := getCDAClass('ClinicalDocument');
 
  	var section : uml::Class :=  result.createOwnedClass('Section',false);
 
 	section.general  := getCDAClass('Section');
 
 	clinicalDocument.createAssociation(true,uml::AggregationKind::none,'section',1,1,section,false,uml::AggregationKind::none,'',1,1);

 
 	self.allSubobjects()[uml::Class]->map toCDA(result,section);
 
 

	// update the name - do this last
	result.name := self.name;	
	
	result.applyStereotype(result.getApplicableStereotype("CDA::CodegenSupport"));
	
	result.setValue(result.getAppliedStereotype("CDA::CodegenSupport"),"basePackage","gov.us.fhim.exchange.cda");
	result.setValue(result.getAppliedStereotype("CDA::CodegenSupport"),"nsPrefix","lab");
	result.setValue(result.getAppliedStereotype("CDA::CodegenSupport"),"nsURI","http://gov.us.fhim.exchange/cda/lab");
	result.setValue(result.getAppliedStereotype("CDA::CodegenSupport"),"packageName","lab");
	result.setValue(result.getAppliedStereotype("CDA::CodegenSupport"),"prefix","Lab");
	
 
}

mapping uml::Class::toCDA(inout package : uml::Package, inout section : uml::Class) 
{



	var rimStereotype : uml::Stereotype := self.general.getAppliedStereotypes()->select(qualifiedName.startsWith('RIM::'))->asSequence()->first();
	
	var cdaClass : uml::Class := getCDAClass(rimStereotype.name);

	log('Mapping ' + self.name + ' to ' + rimStereotype.name);	

	var mappedClass : uml::Class :=  object uml::Class {
		name := self.name;
		general := cdaClass;
	};	
	
	
	var collectionTemplatesPosition : Integer := 1;
	
	var attribute : uml::Property;
	
	while (collectionTemplatesPosition <= self.ownedAttribute->size()) {


		attribute := cdaClass.ownedAttribute->select(name=self.ownedAttribute->at(collectionTemplatesPosition).name)->asSequence()->first();
		
		attribute.lower := self.ownedAttribute->at(collectionTemplatesPosition).lower;
		
		attribute.upper := self.ownedAttribute->at(collectionTemplatesPosition).upper;
		
		mappedClass.ownedAttribute += attribute;
		
		collectionTemplatesPosition := collectionTemplatesPosition + 1;
	
	};
	
	
	
	package.ownedType += mappedClass;
	
	collectionTemplatesPosition:= 1;
	
		while (collectionTemplatesPosition <= mappedClass.ownedAttribute->size()) {
		
		mappedClass.ownedAttribute->at(collectionTemplatesPosition)->cloneAppliedStereotypes(self.ownedAttribute->at(collectionTemplatesPosition));
		
		collectionTemplatesPosition := collectionTemplatesPosition + 1;
	
	};
	
	section.createAssociation(true,uml::AggregationKind::none,mappedClass.name,1,1,mappedClass,false,uml::AggregationKind::none,'',1,1);
	
	
}

mapping inout uml::Property::cloneAppliedStereotypes(in  sourceProperty : uml::Property)
{

var termstereotype : uml::Stereotype := sourceProperty.getApplicableStereotype('Terminology::ValueSetConstraint');

if (sourceProperty.isStereotypeApplied(termstereotype) ) then 
{
	applyStereotype(termstereotype);
	
	var vsv : term::ValueSetVersion := sourceProperty.getValue(termstereotype,"reference").oclAsType(term::ValueSetVersion);
	
	setValue(getAppliedStereotype('Terminology::ValueSetConstraint'),"reference",vsv);
	
	
//	var enumerationSource : uml::Enumeration := getTerminologyEnumeration(sourceProperty.getValue(termstereotype,"reference").repr());
	
//	var termstereotype2   := enumerationSource.getAppliedStereotype('Terminology::ValueSetVersion');
	
	
//	var id : String := enumerationSource.getValue(termstereotype2,"identifier")->oclAsType(String)->asSequence()->first();
	
	
//	var wtf := getTerminologyValueSetVersion(id);
	
//	log('wwwwwwwwwwwwwwww'+wtf.repr());
	
	
//	log('Terminology::ValueSetVersion Application is ' + termstereotype2.repr());
	
//	setValue(getAppliedStereotype('Terminology::ValueSetConstraint'),"name",'blahblah');
	
//	log('aaaaaaaaaaaaaaaaaaaaeeeeeeeeeeeeeeeeeeee'+getValue(getAppliedStereotype('Terminology::ValueSetConstraint'),"name").repr());
	
	
	
	
 } endif;

}

mapping inout uml::Property::acloneAppliedStereotypes(in  sourceProperty : uml::Property)
{
		var collectionTemplatesPosition : Integer := 1;
	
	var cloned : uml::Stereotype;
	
	log(sourceProperty.qualifiedName);
	
	log(sourceProperty.getNearestPackage().profileApplication->size().repr());
	
	while (collectionTemplatesPosition <= sourceProperty.getAppliedStereotypes()->size()) {
		
		
		log(sourceProperty.getAppliedStereotypes()->asSequence()->at(collectionTemplatesPosition).repr());
		
		cloned := sourceProperty.getAppliedStereotypes()->asSequence()->at(collectionTemplatesPosition);
		
		 log('cloning '+cloned.name);
		
		applyStereotype(cloned);


		log(cloned.ownedAttribute->asSequence()->size().repr()  );
		
		var k  : Integer := 1;
		
		var valueName : String;
		
		while(k <= cloned.ownedAttribute->asSequence()->size())
		{
		
			valueName := cloned.ownedAttribute->asSequence()->at(k).name;
			
			if (sourceProperty.hasValue(cloned,valueName)) then

{		
		
		
		 log('name '+cloned.ownedAttribute->asSequence()->at(k).name);
		 
		 log('value '+sourceProperty.getValue(cloned, cloned.ownedAttribute->asSequence()->at(k).name ).repr() );
		 
		 
		 //ifsourceProperty.hasValue()
		 
			self.setValue(cloned,cloned.ownedAttribute->asSequence()->at(k).name,sourceProperty.getValue(cloned, cloned.ownedAttribute->asSequence()->at(k).name ));
			} endif;
			
			k := k +1;
		};
		
		
		
		
		collectionTemplatesPosition := collectionTemplatesPosition + 1;
		
	};
}


mapping inout uml::Stereotype::mapStereotypeValues()
{

//self.getKeywords()

	
}

mapping uml::Model::toNIEM() : uml::Model
{
	// Clone the FHIM instance to NIEM instance
	init{
		result := self.deepclone().oclAsType(Model);
	}

	// Update the generalizations of the extension 
	result.allSubobjects()[uml::Generalization].map mapGeneralizations(); 
	
	// Update and bind to terminology model 
	 result.allSubobjects()[uml::Class] -> map mapTerminology();

	// update the name - do this last
	result.name := 'NEIM'+self.name;
}


// map generalizations to niem core
mapping  inout uml::Generalization::mapGeneralizations() 
{
	log('Maping FHIM generalizations');	
	// use cda template profile for the meantime - need to create niem version
	var cdastereotype : uml::Stereotype := self.general.getAppliedStereotype('CDA::CDATemplate');
	
	var templateId :=	self.general.getValue(cdastereotype,"templateId");
	
	self.general := getFHIMClass(templateId.repr());

}

mapping inout uml::Class::mapTerminology() {
	
	log ('Mapping FHIM terminology ');
	
	nestedClassifier += self.ownedAttribute -> map mapTerminology();
	
	// Appying xsd after the add so the profile is available
	nestedClassifier[uml::Class]->map applyXSD(); 
	
}

mapping inout uml::Property::mapTerminology() : uml::Class when { self.type != null and  self.type.name = 'Code'  }
{	

	// create the class restul
	init {
		result := object uml::Class {
		name := '_'+self.name;
		general := getCDAClass('anyType');
		};	
	
		// value property 
		var valueProperty : uml::Property := 
		object uml::Property
		{
			name := 'value';
			//type := getNiemDataType('string');
		};
	
		// value set id attribute
		var valueSetIdProperty : uml::Property := 
		object uml::Property
		{
			name := 'valueSetId';
		};
	
		// get the corresponding fhim property
		var fhimProperty : uml::Property := getFHIMProperty(self.qualifiedName);

		var termstereotype : uml::Stereotype := fhimProperty.getAppliedStereotype('Terminology::ValueSetConstraint');
	
		var enumerationSource : uml::Enumeration := getTerminologyEnumeration(fhimProperty.getValue(termstereotype,"reference").repr());
	
		var enumerationTarget : uml::Enumeration  := enumerationSource.deepclone().oclAsType(uml::Enumeration );
	
		var termstereotype2 : uml::Stereotype := enumerationSource.getAppliedStereotype('Terminology::ValueSetVersion');

		valueSetIdProperty.defaultValue := object uml::LiteralString {
			value  := enumerationSource.getValue(termstereotype2,"identifier")->oclAsType(String)->asSequence()->first();
		};

		result.ownedAttribute += valueProperty;

		result.ownedAttribute += valueSetIdProperty ;
	
		result.nestedClassifier += enumerationTarget ;
		
		// set the value to the inlined enumeration
		valueProperty.type := enumerationTarget;
		
	}

	// set the type of the property
	self.type := result;

}


mapping  inout uml::Class::createInnerClasses() 
{
	nestedClassifier += self.ownedAttribute -> map createInnerClasses() ;

}


// apply xsd to valuesetid 
mapping  inout uml::Property::applyXSD() 
{
	
	if (name = 'valueSetId') then
	{
		var xsdstereotype : uml::Stereotype := getApplicableStereotype('XMLSchema::Attribute');

		applyStereotype(xsdstereotype);
		
	}endif;
	 
}


mapping  inout uml::Class::applyXSD() 
{
	self.ownedAttribute[uml::Property] ->map applyXSD();
}

mapping inout uml::Property::createInnerClasses() : uml::Class
{
	
	init {
		result := object uml::Class {
			name := '_' + self.name;
			general := getCDAClass('anyType');
		};	
	}

	
	var p : uml::Property := 
	object uml::Property
	{
		name := 'valueSetId';
	};

	result.ownedAttribute += p;

	self.type = result;


}
// http://www.openhealthtools.org/mdht/uml/cda/annotation
query ecore::EClass::getAnnotation(in annotation : String) : ecore::EAnnotation
{
	return self.getEAnnotation(annotation);	
}


query ecore::EAnnotation::getKey() : ecore::EString
{
	return self.details->first().key;
}

query getCDAClass(in niemClassName: String ) : uml::Class
{   
   return cdaBaseModel.objectsOfType(uml::Class)->asSequence()->select(niemClassName=name)->first();
}

query getNiemDataType(in niemClassName: String ) : uml::DataType
{   
   return cdaBaseModel.objectsOfType(uml::DataType)->asSequence()->select(niemClassName=name)->first();
}

query getFHIMProperty(in fhimPropertyName: String ) : uml::Property
{   
   return fhimModel.objectsOfType(uml::Property)->asSequence()->select(fhimPropertyName=qualifiedName)->first();
}



query getFHIMClass(in fhimClassName: String ) : uml::Class
{   
   return cdaBaseModel.objectsOfType(uml::Class)->asSequence()->select(fhimClassName=name)->first();
}


query getTerminologyEnumeration(in termClassName: String ) : uml::Enumeration
{
	var vocabularyPackage :=  fhimModel.rootObjects()[uml::Package].getImportedPackages()->select(name='HITSP-C80')->asSequence()->first();   
	 
  var enumeration := vocabularyPackage.allSubobjects()[uml::Enumeration]->asSequence()->select(termClassName=qualifiedName)->first();

  return enumeration;
  
}

query getTerminologyValueSetVersion(in id: String ) : term::ValueSetVersion
{
log('aaaaaaaaaaaaaaaaaaaaaa');
	var vocabularyPackage :=  fhimModel.rootObjects()[uml::Package].getImportedPackages()->select(name='HITSP-C80')->asSequence()->first();   
	log(vocabularyPackage.repr()); 
	log(vocabularyPackage.owner.ownedElement[term::ValueSetVersion]->asSequence()->size().repr());
	
 var enumeration := vocabularyPackage.allSubobjects()[term::ValueSetVersion]->asSequence()->select(identifier=id)->first();

log('bbbbbbbbbbbbbbbbbbbbbbbbbbbb');

  return enumeration;
  
}


query uml::Model::getPackageImport(in packageName: String )  : uml::Package
{
	self.packageImport->displayPackage();

	 return self.packageImport->select(packageName=importedPackage.name)->asSequence()->first().importedPackage;
}


// Add to general purpose qvt library  
 
mapping uml::PackageImport::displayPackage() 
{
	log('uml::Package is ' +self.importedPackage.qualifiedName);
}

mapping uml::Stereotype::displayStereotype()
{
	log('uml::Stereotype is ' + self.qualifiedName);	
}
mapping uml::NamedElement::displayNamedElement()
{
	log('uml::NameElement is ' + self.qualifiedName);	
}
 
 

